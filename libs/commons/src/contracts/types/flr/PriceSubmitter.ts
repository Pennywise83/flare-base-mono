/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface PriceSubmitterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MINIMAL_RANDOM"
      | "RANDOM_EPOCH_CYCLIC_BUFFER_SIZE"
      | "cancelGovernanceCall"
      | "executeGovernanceCall"
      | "getAddressUpdater"
      | "getCurrentRandom"
      | "getFtsoManager"
      | "getFtsoRegistry"
      | "getRandom"
      | "getTrustedAddresses"
      | "getVoterWhitelister"
      | "governance"
      | "governanceSettings"
      | "initialise"
      | "initialiseFixedAddress"
      | "productionMode"
      | "revealPrices"
      | "setAddressUpdater"
      | "setTrustedAddresses"
      | "submitHash"
      | "switchToProductionMode"
      | "timelockedCalls"
      | "updateContractAddresses"
      | "voterWhitelistBitmap"
      | "voterWhitelisted"
      | "votersRemovedFromWhitelist"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "GovernanceCallTimelocked"
      | "GovernanceInitialised"
      | "GovernedProductionModeEntered"
      | "HashSubmitted"
      | "PricesRevealed"
      | "TimelockedGovernanceCallCanceled"
      | "TimelockedGovernanceCallExecuted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MINIMAL_RANDOM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RANDOM_EPOCH_CYCLIC_BUFFER_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelGovernanceCall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeGovernanceCall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressUpdater",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRandom",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFtsoManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFtsoRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRandom",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterWhitelister",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceSettings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialise",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialiseFixedAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "productionMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revealPrices",
    values: [BigNumberish, BigNumberish[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddressUpdater",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedAddresses",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "submitHash",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "switchToProductionMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timelockedCalls",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateContractAddresses",
    values: [BytesLike[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "voterWhitelistBitmap",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "voterWhitelisted",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votersRemovedFromWhitelist",
    values: [AddressLike[], BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MINIMAL_RANDOM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RANDOM_EPOCH_CYCLIC_BUFFER_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelGovernanceCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeGovernanceCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddressUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRandom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFtsoManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFtsoRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRandom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterWhitelister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "governanceSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialise", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialiseFixedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "productionMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddressUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "switchToProductionMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timelockedCalls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateContractAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voterWhitelistBitmap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voterWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votersRemovedFromWhitelist",
    data: BytesLike
  ): Result;
}

export namespace GovernanceCallTimelockedEvent {
  export type InputTuple = [
    selector: BytesLike,
    allowedAfterTimestamp: BigNumberish,
    encodedCall: BytesLike
  ];
  export type OutputTuple = [
    selector: string,
    allowedAfterTimestamp: bigint,
    encodedCall: string
  ];
  export interface OutputObject {
    selector: string;
    allowedAfterTimestamp: bigint;
    encodedCall: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernanceInitialisedEvent {
  export type InputTuple = [initialGovernance: AddressLike];
  export type OutputTuple = [initialGovernance: string];
  export interface OutputObject {
    initialGovernance: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernedProductionModeEnteredEvent {
  export type InputTuple = [governanceSettings: AddressLike];
  export type OutputTuple = [governanceSettings: string];
  export interface OutputObject {
    governanceSettings: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HashSubmittedEvent {
  export type InputTuple = [
    submitter: AddressLike,
    epochId: BigNumberish,
    hash: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    submitter: string,
    epochId: bigint,
    hash: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    submitter: string;
    epochId: bigint;
    hash: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PricesRevealedEvent {
  export type InputTuple = [
    voter: AddressLike,
    epochId: BigNumberish,
    ftsos: AddressLike[],
    prices: BigNumberish[],
    random: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    voter: string,
    epochId: bigint,
    ftsos: string[],
    prices: bigint[],
    random: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    voter: string;
    epochId: bigint;
    ftsos: string[];
    prices: bigint[];
    random: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimelockedGovernanceCallCanceledEvent {
  export type InputTuple = [selector: BytesLike, timestamp: BigNumberish];
  export type OutputTuple = [selector: string, timestamp: bigint];
  export interface OutputObject {
    selector: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimelockedGovernanceCallExecutedEvent {
  export type InputTuple = [selector: BytesLike, timestamp: BigNumberish];
  export type OutputTuple = [selector: string, timestamp: bigint];
  export interface OutputObject {
    selector: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PriceSubmitter extends BaseContract {
  connect(runner?: ContractRunner | null): PriceSubmitter;
  waitForDeployment(): Promise<this>;

  interface: PriceSubmitterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MINIMAL_RANDOM: TypedContractMethod<[], [bigint], "view">;

  RANDOM_EPOCH_CYCLIC_BUFFER_SIZE: TypedContractMethod<[], [bigint], "view">;

  cancelGovernanceCall: TypedContractMethod<
    [_selector: BytesLike],
    [void],
    "nonpayable"
  >;

  executeGovernanceCall: TypedContractMethod<
    [_selector: BytesLike],
    [void],
    "nonpayable"
  >;

  getAddressUpdater: TypedContractMethod<[], [string], "view">;

  getCurrentRandom: TypedContractMethod<[], [bigint], "view">;

  getFtsoManager: TypedContractMethod<[], [string], "view">;

  getFtsoRegistry: TypedContractMethod<[], [string], "view">;

  getRandom: TypedContractMethod<[_epochId: BigNumberish], [bigint], "view">;

  getTrustedAddresses: TypedContractMethod<[], [string[]], "view">;

  getVoterWhitelister: TypedContractMethod<[], [string], "view">;

  governance: TypedContractMethod<[], [string], "view">;

  governanceSettings: TypedContractMethod<[], [string], "view">;

  initialise: TypedContractMethod<[_governance: AddressLike], [void], "view">;

  initialiseFixedAddress: TypedContractMethod<[], [string], "nonpayable">;

  productionMode: TypedContractMethod<[], [boolean], "view">;

  revealPrices: TypedContractMethod<
    [
      _epochId: BigNumberish,
      _ftsoIndices: BigNumberish[],
      _prices: BigNumberish[],
      _random: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setAddressUpdater: TypedContractMethod<
    [_addressUpdater: AddressLike],
    [void],
    "nonpayable"
  >;

  setTrustedAddresses: TypedContractMethod<
    [_trustedAddresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  submitHash: TypedContractMethod<
    [_epochId: BigNumberish, _hash: BytesLike],
    [void],
    "nonpayable"
  >;

  switchToProductionMode: TypedContractMethod<[], [void], "nonpayable">;

  timelockedCalls: TypedContractMethod<
    [arg0: BytesLike],
    [[bigint, string] & { allowedAfterTimestamp: bigint; encodedCall: string }],
    "view"
  >;

  updateContractAddresses: TypedContractMethod<
    [_contractNameHashes: BytesLike[], _contractAddresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  voterWhitelistBitmap: TypedContractMethod<
    [_voter: AddressLike],
    [bigint],
    "view"
  >;

  voterWhitelisted: TypedContractMethod<
    [_voter: AddressLike, _ftsoIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  votersRemovedFromWhitelist: TypedContractMethod<
    [_removedVoters: AddressLike[], _ftsoIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MINIMAL_RANDOM"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "RANDOM_EPOCH_CYCLIC_BUFFER_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "cancelGovernanceCall"
  ): TypedContractMethod<[_selector: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeGovernanceCall"
  ): TypedContractMethod<[_selector: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAddressUpdater"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCurrentRandom"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFtsoManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getFtsoRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRandom"
  ): TypedContractMethod<[_epochId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTrustedAddresses"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getVoterWhitelister"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "governance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "governanceSettings"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialise"
  ): TypedContractMethod<[_governance: AddressLike], [void], "view">;
  getFunction(
    nameOrSignature: "initialiseFixedAddress"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "productionMode"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "revealPrices"
  ): TypedContractMethod<
    [
      _epochId: BigNumberish,
      _ftsoIndices: BigNumberish[],
      _prices: BigNumberish[],
      _random: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAddressUpdater"
  ): TypedContractMethod<[_addressUpdater: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTrustedAddresses"
  ): TypedContractMethod<
    [_trustedAddresses: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitHash"
  ): TypedContractMethod<
    [_epochId: BigNumberish, _hash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "switchToProductionMode"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "timelockedCalls"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[bigint, string] & { allowedAfterTimestamp: bigint; encodedCall: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateContractAddresses"
  ): TypedContractMethod<
    [_contractNameHashes: BytesLike[], _contractAddresses: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "voterWhitelistBitmap"
  ): TypedContractMethod<[_voter: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "voterWhitelisted"
  ): TypedContractMethod<
    [_voter: AddressLike, _ftsoIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "votersRemovedFromWhitelist"
  ): TypedContractMethod<
    [_removedVoters: AddressLike[], _ftsoIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "GovernanceCallTimelocked"
  ): TypedContractEvent<
    GovernanceCallTimelockedEvent.InputTuple,
    GovernanceCallTimelockedEvent.OutputTuple,
    GovernanceCallTimelockedEvent.OutputObject
  >;
  getEvent(
    key: "GovernanceInitialised"
  ): TypedContractEvent<
    GovernanceInitialisedEvent.InputTuple,
    GovernanceInitialisedEvent.OutputTuple,
    GovernanceInitialisedEvent.OutputObject
  >;
  getEvent(
    key: "GovernedProductionModeEntered"
  ): TypedContractEvent<
    GovernedProductionModeEnteredEvent.InputTuple,
    GovernedProductionModeEnteredEvent.OutputTuple,
    GovernedProductionModeEnteredEvent.OutputObject
  >;
  getEvent(
    key: "HashSubmitted"
  ): TypedContractEvent<
    HashSubmittedEvent.InputTuple,
    HashSubmittedEvent.OutputTuple,
    HashSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "PricesRevealed"
  ): TypedContractEvent<
    PricesRevealedEvent.InputTuple,
    PricesRevealedEvent.OutputTuple,
    PricesRevealedEvent.OutputObject
  >;
  getEvent(
    key: "TimelockedGovernanceCallCanceled"
  ): TypedContractEvent<
    TimelockedGovernanceCallCanceledEvent.InputTuple,
    TimelockedGovernanceCallCanceledEvent.OutputTuple,
    TimelockedGovernanceCallCanceledEvent.OutputObject
  >;
  getEvent(
    key: "TimelockedGovernanceCallExecuted"
  ): TypedContractEvent<
    TimelockedGovernanceCallExecutedEvent.InputTuple,
    TimelockedGovernanceCallExecutedEvent.OutputTuple,
    TimelockedGovernanceCallExecutedEvent.OutputObject
  >;

  filters: {
    "GovernanceCallTimelocked(bytes4,uint256,bytes)": TypedContractEvent<
      GovernanceCallTimelockedEvent.InputTuple,
      GovernanceCallTimelockedEvent.OutputTuple,
      GovernanceCallTimelockedEvent.OutputObject
    >;
    GovernanceCallTimelocked: TypedContractEvent<
      GovernanceCallTimelockedEvent.InputTuple,
      GovernanceCallTimelockedEvent.OutputTuple,
      GovernanceCallTimelockedEvent.OutputObject
    >;

    "GovernanceInitialised(address)": TypedContractEvent<
      GovernanceInitialisedEvent.InputTuple,
      GovernanceInitialisedEvent.OutputTuple,
      GovernanceInitialisedEvent.OutputObject
    >;
    GovernanceInitialised: TypedContractEvent<
      GovernanceInitialisedEvent.InputTuple,
      GovernanceInitialisedEvent.OutputTuple,
      GovernanceInitialisedEvent.OutputObject
    >;

    "GovernedProductionModeEntered(address)": TypedContractEvent<
      GovernedProductionModeEnteredEvent.InputTuple,
      GovernedProductionModeEnteredEvent.OutputTuple,
      GovernedProductionModeEnteredEvent.OutputObject
    >;
    GovernedProductionModeEntered: TypedContractEvent<
      GovernedProductionModeEnteredEvent.InputTuple,
      GovernedProductionModeEnteredEvent.OutputTuple,
      GovernedProductionModeEnteredEvent.OutputObject
    >;

    "HashSubmitted(address,uint256,bytes32,uint256)": TypedContractEvent<
      HashSubmittedEvent.InputTuple,
      HashSubmittedEvent.OutputTuple,
      HashSubmittedEvent.OutputObject
    >;
    HashSubmitted: TypedContractEvent<
      HashSubmittedEvent.InputTuple,
      HashSubmittedEvent.OutputTuple,
      HashSubmittedEvent.OutputObject
    >;

    "PricesRevealed(address,uint256,address[],uint256[],uint256,uint256)": TypedContractEvent<
      PricesRevealedEvent.InputTuple,
      PricesRevealedEvent.OutputTuple,
      PricesRevealedEvent.OutputObject
    >;
    PricesRevealed: TypedContractEvent<
      PricesRevealedEvent.InputTuple,
      PricesRevealedEvent.OutputTuple,
      PricesRevealedEvent.OutputObject
    >;

    "TimelockedGovernanceCallCanceled(bytes4,uint256)": TypedContractEvent<
      TimelockedGovernanceCallCanceledEvent.InputTuple,
      TimelockedGovernanceCallCanceledEvent.OutputTuple,
      TimelockedGovernanceCallCanceledEvent.OutputObject
    >;
    TimelockedGovernanceCallCanceled: TypedContractEvent<
      TimelockedGovernanceCallCanceledEvent.InputTuple,
      TimelockedGovernanceCallCanceledEvent.OutputTuple,
      TimelockedGovernanceCallCanceledEvent.OutputObject
    >;

    "TimelockedGovernanceCallExecuted(bytes4,uint256)": TypedContractEvent<
      TimelockedGovernanceCallExecutedEvent.InputTuple,
      TimelockedGovernanceCallExecutedEvent.OutputTuple,
      TimelockedGovernanceCallExecutedEvent.OutputObject
    >;
    TimelockedGovernanceCallExecuted: TypedContractEvent<
      TimelockedGovernanceCallExecutedEvent.InputTuple,
      TimelockedGovernanceCallExecutedEvent.OutputTuple,
      TimelockedGovernanceCallExecutedEvent.OutputObject
    >;
  };
}
