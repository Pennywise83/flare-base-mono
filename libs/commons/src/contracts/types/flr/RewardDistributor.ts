/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IRewardDistributor {
  export type RecipientStruct = {
    recipient: AddressLike;
    bips: BigNumberish;
    wrap: boolean;
  };

  export type RecipientStructOutput = [
    recipient: string,
    bips: bigint,
    wrap: boolean
  ] & { recipient: string; bips: bigint; wrap: boolean };
}

export interface RewardDistributorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "destroy"
      | "owner"
      | "provider"
      | "recipients"
      | "recipientsAll"
      | "recipientsCount"
      | "replaceOwner"
      | "replaceRecipients"
      | "replaceReserveBalance"
      | "reserveBalance"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Refill" | "Reward" | "TotalRewards"
  ): EventFragment;

  encodeFunctionData(functionFragment: "destroy", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "provider", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recipients",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recipientsAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recipientsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "replaceOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceRecipients",
    values: [AddressLike[], BigNumberish[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceReserveBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveBalance",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "destroy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "provider", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recipients", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recipientsAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recipientsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceRecipients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceReserveBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveBalance",
    data: BytesLike
  ): Result;
}

export namespace RefillEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardEvent {
  export type InputTuple = [recipient: AddressLike, amount: BigNumberish];
  export type OutputTuple = [recipient: string, amount: bigint];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TotalRewardsEvent {
  export type InputTuple = [timestamp: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [timestamp: bigint, amount: bigint];
  export interface OutputObject {
    timestamp: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RewardDistributor extends BaseContract {
  connect(runner?: ContractRunner | null): RewardDistributor;
  waitForDeployment(): Promise<this>;

  interface: RewardDistributorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  destroy: TypedContractMethod<[], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  recipients: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean] & {
        recipient: string;
        bips: bigint;
        wrap: boolean;
      }
    ],
    "view"
  >;

  recipientsAll: TypedContractMethod<
    [],
    [IRewardDistributor.RecipientStructOutput[]],
    "view"
  >;

  recipientsCount: TypedContractMethod<[], [bigint], "view">;

  replaceOwner: TypedContractMethod<
    [_owner: AddressLike],
    [void],
    "nonpayable"
  >;

  replaceRecipients: TypedContractMethod<
    [_recipients: AddressLike[], _bips: BigNumberish[], _wrap: boolean[]],
    [void],
    "nonpayable"
  >;

  replaceReserveBalance: TypedContractMethod<
    [_reserveBalance: BigNumberish],
    [void],
    "nonpayable"
  >;

  reserveBalance: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "destroy"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "provider"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recipients"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean] & {
        recipient: string;
        bips: bigint;
        wrap: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "recipientsAll"
  ): TypedContractMethod<
    [],
    [IRewardDistributor.RecipientStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "recipientsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "replaceOwner"
  ): TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "replaceRecipients"
  ): TypedContractMethod<
    [_recipients: AddressLike[], _bips: BigNumberish[], _wrap: boolean[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "replaceReserveBalance"
  ): TypedContractMethod<[_reserveBalance: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reserveBalance"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Refill"
  ): TypedContractEvent<
    RefillEvent.InputTuple,
    RefillEvent.OutputTuple,
    RefillEvent.OutputObject
  >;
  getEvent(
    key: "Reward"
  ): TypedContractEvent<
    RewardEvent.InputTuple,
    RewardEvent.OutputTuple,
    RewardEvent.OutputObject
  >;
  getEvent(
    key: "TotalRewards"
  ): TypedContractEvent<
    TotalRewardsEvent.InputTuple,
    TotalRewardsEvent.OutputTuple,
    TotalRewardsEvent.OutputObject
  >;

  filters: {
    "Refill(uint256)": TypedContractEvent<
      RefillEvent.InputTuple,
      RefillEvent.OutputTuple,
      RefillEvent.OutputObject
    >;
    Refill: TypedContractEvent<
      RefillEvent.InputTuple,
      RefillEvent.OutputTuple,
      RefillEvent.OutputObject
    >;

    "Reward(address,uint256)": TypedContractEvent<
      RewardEvent.InputTuple,
      RewardEvent.OutputTuple,
      RewardEvent.OutputObject
    >;
    Reward: TypedContractEvent<
      RewardEvent.InputTuple,
      RewardEvent.OutputTuple,
      RewardEvent.OutputObject
    >;

    "TotalRewards(uint256,uint256)": TypedContractEvent<
      TotalRewardsEvent.InputTuple,
      TotalRewardsEvent.OutputTuple,
      TotalRewardsEvent.OutputObject
    >;
    TotalRewards: TypedContractEvent<
      TotalRewardsEvent.InputTuple,
      TotalRewardsEvent.OutputTuple,
      TotalRewardsEvent.OutputObject
    >;
  };
}
