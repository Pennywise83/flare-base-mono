/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface AddressUpdaterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addOrUpdateContractNamesAndAddresses"
      | "cancelGovernanceCall"
      | "executeGovernanceCall"
      | "getContractAddress"
      | "getContractAddressByHash"
      | "getContractAddresses"
      | "getContractAddressesByHash"
      | "getContractNamesAndAddresses"
      | "governance"
      | "governanceSettings"
      | "initialise"
      | "productionMode"
      | "removeContracts"
      | "switchToProductionMode"
      | "timelockedCalls"
      | "update"
      | "updateContractAddresses"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "GovernanceCallTimelocked"
      | "GovernanceInitialised"
      | "GovernedProductionModeEntered"
      | "TimelockedGovernanceCallCanceled"
      | "TimelockedGovernanceCallExecuted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addOrUpdateContractNamesAndAddresses",
    values: [string[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelGovernanceCall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeGovernanceCall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractAddressByHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractAddresses",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractAddressesByHash",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractNamesAndAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceSettings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialise",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "productionMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeContracts",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "switchToProductionMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timelockedCalls",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [string[], AddressLike[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateContractAddresses",
    values: [AddressLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "addOrUpdateContractNamesAndAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelGovernanceCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeGovernanceCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractAddressByHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractAddressesByHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractNamesAndAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "governanceSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialise", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "productionMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "switchToProductionMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timelockedCalls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateContractAddresses",
    data: BytesLike
  ): Result;
}

export namespace GovernanceCallTimelockedEvent {
  export type InputTuple = [
    selector: BytesLike,
    allowedAfterTimestamp: BigNumberish,
    encodedCall: BytesLike
  ];
  export type OutputTuple = [
    selector: string,
    allowedAfterTimestamp: bigint,
    encodedCall: string
  ];
  export interface OutputObject {
    selector: string;
    allowedAfterTimestamp: bigint;
    encodedCall: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernanceInitialisedEvent {
  export type InputTuple = [initialGovernance: AddressLike];
  export type OutputTuple = [initialGovernance: string];
  export interface OutputObject {
    initialGovernance: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernedProductionModeEnteredEvent {
  export type InputTuple = [governanceSettings: AddressLike];
  export type OutputTuple = [governanceSettings: string];
  export interface OutputObject {
    governanceSettings: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimelockedGovernanceCallCanceledEvent {
  export type InputTuple = [selector: BytesLike, timestamp: BigNumberish];
  export type OutputTuple = [selector: string, timestamp: bigint];
  export interface OutputObject {
    selector: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimelockedGovernanceCallExecutedEvent {
  export type InputTuple = [selector: BytesLike, timestamp: BigNumberish];
  export type OutputTuple = [selector: string, timestamp: bigint];
  export interface OutputObject {
    selector: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AddressUpdater extends BaseContract {
  connect(runner?: ContractRunner | null): AddressUpdater;
  waitForDeployment(): Promise<this>;

  interface: AddressUpdaterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addOrUpdateContractNamesAndAddresses: TypedContractMethod<
    [_contractNames: string[], _contractAddresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  cancelGovernanceCall: TypedContractMethod<
    [_selector: BytesLike],
    [void],
    "nonpayable"
  >;

  executeGovernanceCall: TypedContractMethod<
    [_selector: BytesLike],
    [void],
    "nonpayable"
  >;

  getContractAddress: TypedContractMethod<[_name: string], [string], "view">;

  getContractAddressByHash: TypedContractMethod<
    [_nameHash: BytesLike],
    [string],
    "view"
  >;

  getContractAddresses: TypedContractMethod<
    [_names: string[]],
    [string[]],
    "view"
  >;

  getContractAddressesByHash: TypedContractMethod<
    [_nameHashes: BytesLike[]],
    [string[]],
    "view"
  >;

  getContractNamesAndAddresses: TypedContractMethod<
    [],
    [
      [string[], string[]] & {
        _contractNames: string[];
        _contractAddresses: string[];
      }
    ],
    "view"
  >;

  governance: TypedContractMethod<[], [string], "view">;

  governanceSettings: TypedContractMethod<[], [string], "view">;

  initialise: TypedContractMethod<
    [_initialGovernance: AddressLike],
    [void],
    "nonpayable"
  >;

  productionMode: TypedContractMethod<[], [boolean], "view">;

  removeContracts: TypedContractMethod<
    [_contractNames: string[]],
    [void],
    "nonpayable"
  >;

  switchToProductionMode: TypedContractMethod<[], [void], "nonpayable">;

  timelockedCalls: TypedContractMethod<
    [arg0: BytesLike],
    [[bigint, string] & { allowedAfterTimestamp: bigint; encodedCall: string }],
    "view"
  >;

  update: TypedContractMethod<
    [
      _contractNames: string[],
      _contractAddresses: AddressLike[],
      _contractsToUpdate: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;

  updateContractAddresses: TypedContractMethod<
    [_contractsToUpdate: AddressLike[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addOrUpdateContractNamesAndAddresses"
  ): TypedContractMethod<
    [_contractNames: string[], _contractAddresses: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelGovernanceCall"
  ): TypedContractMethod<[_selector: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeGovernanceCall"
  ): TypedContractMethod<[_selector: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getContractAddress"
  ): TypedContractMethod<[_name: string], [string], "view">;
  getFunction(
    nameOrSignature: "getContractAddressByHash"
  ): TypedContractMethod<[_nameHash: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getContractAddresses"
  ): TypedContractMethod<[_names: string[]], [string[]], "view">;
  getFunction(
    nameOrSignature: "getContractAddressesByHash"
  ): TypedContractMethod<[_nameHashes: BytesLike[]], [string[]], "view">;
  getFunction(
    nameOrSignature: "getContractNamesAndAddresses"
  ): TypedContractMethod<
    [],
    [
      [string[], string[]] & {
        _contractNames: string[];
        _contractAddresses: string[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "governance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "governanceSettings"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialise"
  ): TypedContractMethod<
    [_initialGovernance: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "productionMode"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeContracts"
  ): TypedContractMethod<[_contractNames: string[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "switchToProductionMode"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "timelockedCalls"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[bigint, string] & { allowedAfterTimestamp: bigint; encodedCall: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "update"
  ): TypedContractMethod<
    [
      _contractNames: string[],
      _contractAddresses: AddressLike[],
      _contractsToUpdate: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateContractAddresses"
  ): TypedContractMethod<
    [_contractsToUpdate: AddressLike[]],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "GovernanceCallTimelocked"
  ): TypedContractEvent<
    GovernanceCallTimelockedEvent.InputTuple,
    GovernanceCallTimelockedEvent.OutputTuple,
    GovernanceCallTimelockedEvent.OutputObject
  >;
  getEvent(
    key: "GovernanceInitialised"
  ): TypedContractEvent<
    GovernanceInitialisedEvent.InputTuple,
    GovernanceInitialisedEvent.OutputTuple,
    GovernanceInitialisedEvent.OutputObject
  >;
  getEvent(
    key: "GovernedProductionModeEntered"
  ): TypedContractEvent<
    GovernedProductionModeEnteredEvent.InputTuple,
    GovernedProductionModeEnteredEvent.OutputTuple,
    GovernedProductionModeEnteredEvent.OutputObject
  >;
  getEvent(
    key: "TimelockedGovernanceCallCanceled"
  ): TypedContractEvent<
    TimelockedGovernanceCallCanceledEvent.InputTuple,
    TimelockedGovernanceCallCanceledEvent.OutputTuple,
    TimelockedGovernanceCallCanceledEvent.OutputObject
  >;
  getEvent(
    key: "TimelockedGovernanceCallExecuted"
  ): TypedContractEvent<
    TimelockedGovernanceCallExecutedEvent.InputTuple,
    TimelockedGovernanceCallExecutedEvent.OutputTuple,
    TimelockedGovernanceCallExecutedEvent.OutputObject
  >;

  filters: {
    "GovernanceCallTimelocked(bytes4,uint256,bytes)": TypedContractEvent<
      GovernanceCallTimelockedEvent.InputTuple,
      GovernanceCallTimelockedEvent.OutputTuple,
      GovernanceCallTimelockedEvent.OutputObject
    >;
    GovernanceCallTimelocked: TypedContractEvent<
      GovernanceCallTimelockedEvent.InputTuple,
      GovernanceCallTimelockedEvent.OutputTuple,
      GovernanceCallTimelockedEvent.OutputObject
    >;

    "GovernanceInitialised(address)": TypedContractEvent<
      GovernanceInitialisedEvent.InputTuple,
      GovernanceInitialisedEvent.OutputTuple,
      GovernanceInitialisedEvent.OutputObject
    >;
    GovernanceInitialised: TypedContractEvent<
      GovernanceInitialisedEvent.InputTuple,
      GovernanceInitialisedEvent.OutputTuple,
      GovernanceInitialisedEvent.OutputObject
    >;

    "GovernedProductionModeEntered(address)": TypedContractEvent<
      GovernedProductionModeEnteredEvent.InputTuple,
      GovernedProductionModeEnteredEvent.OutputTuple,
      GovernedProductionModeEnteredEvent.OutputObject
    >;
    GovernedProductionModeEntered: TypedContractEvent<
      GovernedProductionModeEnteredEvent.InputTuple,
      GovernedProductionModeEnteredEvent.OutputTuple,
      GovernedProductionModeEnteredEvent.OutputObject
    >;

    "TimelockedGovernanceCallCanceled(bytes4,uint256)": TypedContractEvent<
      TimelockedGovernanceCallCanceledEvent.InputTuple,
      TimelockedGovernanceCallCanceledEvent.OutputTuple,
      TimelockedGovernanceCallCanceledEvent.OutputObject
    >;
    TimelockedGovernanceCallCanceled: TypedContractEvent<
      TimelockedGovernanceCallCanceledEvent.InputTuple,
      TimelockedGovernanceCallCanceledEvent.OutputTuple,
      TimelockedGovernanceCallCanceledEvent.OutputObject
    >;

    "TimelockedGovernanceCallExecuted(bytes4,uint256)": TypedContractEvent<
      TimelockedGovernanceCallExecutedEvent.InputTuple,
      TimelockedGovernanceCallExecutedEvent.OutputTuple,
      TimelockedGovernanceCallExecutedEvent.OutputObject
    >;
    TimelockedGovernanceCallExecuted: TypedContractEvent<
      TimelockedGovernanceCallExecutedEvent.InputTuple,
      TimelockedGovernanceCallExecutedEvent.OutputTuple,
      TimelockedGovernanceCallExecutedEvent.OutputObject
    >;
  };
}
