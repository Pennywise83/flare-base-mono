/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IIFtsoManager {
  export type RewardEpochDataStruct = {
    votepowerBlock: BigNumberish;
    startBlock: BigNumberish;
    startTimestamp: BigNumberish;
  };

  export type RewardEpochDataStructOutput = [
    votepowerBlock: bigint,
    startBlock: bigint,
    startTimestamp: bigint
  ] & { votepowerBlock: bigint; startBlock: bigint; startTimestamp: bigint };
}

export interface FtsoManagerOldInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_TRUSTED_ADDRESSES_LENGTH"
      | "activate"
      | "active"
      | "addFtso"
      | "addFtsosBulk"
      | "cancelGovernanceCall"
      | "cleanupBlockNumberManager"
      | "currentRewardEpochEnds"
      | "daemonize"
      | "deactivateFtsos"
      | "errorData"
      | "executeGovernanceCall"
      | "flareDaemon"
      | "ftsoManagement"
      | "ftsoRegistry"
      | "getAddressUpdater"
      | "getContractName"
      | "getCurrentPriceEpochData"
      | "getCurrentPriceEpochId"
      | "getCurrentRewardEpoch"
      | "getFallbackMode"
      | "getFtsos"
      | "getGovernanceParameters"
      | "getLastUnprocessedPriceEpochData"
      | "getPriceEpochConfiguration"
      | "getPriceSubmitter"
      | "getRewardEpochConfiguration"
      | "getRewardEpochData"
      | "getRewardEpochToExpireNext"
      | "getRewardEpochVotePowerBlock"
      | "getVotePowerIntervalFraction"
      | "governance"
      | "governanceSettings"
      | "initialise"
      | "lastRewardedFtsoAddress"
      | "notInitializedFtsos"
      | "oldFtsoManager"
      | "priceSubmitter"
      | "productionMode"
      | "removeFtso"
      | "replaceFtso"
      | "replaceFtsosBulk"
      | "rewardEpochDurationSeconds"
      | "rewardEpochs"
      | "rewardEpochsStartTs"
      | "rewardManager"
      | "setFallbackMode"
      | "setFtsoAsset"
      | "setFtsoAssetFtsos"
      | "setFtsoFallbackMode"
      | "setGovernanceParameters"
      | "setInitialRewardData"
      | "setRewardEpochDurationSeconds"
      | "setUpdateOnRewardEpochSwitchover"
      | "setVotePowerIntervalFraction"
      | "settings"
      | "showLastRevertedError"
      | "showRevertedErrors"
      | "supply"
      | "switchToFallbackMode"
      | "switchToProductionMode"
      | "timelockedCalls"
      | "updateContractAddresses"
      | "updateOnRewardEpochSwitchover"
      | "voterWhitelister"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccruingUnearnedRewardsFailed"
      | "CleanupBlockNumberManagerFailedForBlock"
      | "ClosingExpiredRewardEpochFailed"
      | "ContractRevertError"
      | "DistributingRewardsFailed"
      | "FallbackMode"
      | "FinalizingPriceEpochFailed"
      | "FtsoAdded"
      | "FtsoDeactivationFailed"
      | "FtsoFallbackMode"
      | "GovernanceCallTimelocked"
      | "GovernanceInitialised"
      | "GovernedProductionModeEntered"
      | "InitializingCurrentEpochStateForRevealFailed"
      | "PriceEpochFinalized"
      | "RewardEpochFinalized"
      | "TimelockedGovernanceCallCanceled"
      | "TimelockedGovernanceCallExecuted"
      | "UpdatingActiveValidatorsTriggerFailed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_TRUSTED_ADDRESSES_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "activate", values?: undefined): string;
  encodeFunctionData(functionFragment: "active", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addFtso",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addFtsosBulk",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelGovernanceCall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cleanupBlockNumberManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentRewardEpochEnds",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "daemonize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deactivateFtsos",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(functionFragment: "errorData", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeGovernanceCall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "flareDaemon",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ftsoManagement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ftsoRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressUpdater",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPriceEpochData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPriceEpochId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRewardEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFallbackMode",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getFtsos", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getGovernanceParameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastUnprocessedPriceEpochData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceEpochConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceSubmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardEpochConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardEpochData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardEpochToExpireNext",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardEpochVotePowerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotePowerIntervalFraction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceSettings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialise",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRewardedFtsoAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "notInitializedFtsos",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "oldFtsoManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceSubmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "productionMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeFtso",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceFtso",
    values: [AddressLike, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceFtsosBulk",
    values: [AddressLike[], boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardEpochDurationSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardEpochs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardEpochsStartTs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFallbackMode",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFtsoAsset",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFtsoAssetFtsos",
    values: [AddressLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setFtsoFallbackMode",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernanceParameters",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setInitialRewardData",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardEpochDurationSeconds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpdateOnRewardEpochSwitchover",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotePowerIntervalFraction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "settings", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "showLastRevertedError",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "showRevertedErrors",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "supply", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "switchToFallbackMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "switchToProductionMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timelockedCalls",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateContractAddresses",
    values: [BytesLike[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOnRewardEpochSwitchover",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voterWhitelister",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_TRUSTED_ADDRESSES_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "activate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "active", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addFtso", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addFtsosBulk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelGovernanceCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cleanupBlockNumberManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRewardEpochEnds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "daemonize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deactivateFtsos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "errorData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeGovernanceCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flareDaemon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ftsoManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ftsoRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddressUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPriceEpochData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPriceEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRewardEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFallbackMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFtsos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGovernanceParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastUnprocessedPriceEpochData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceEpochConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceSubmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardEpochConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardEpochData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardEpochToExpireNext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardEpochVotePowerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotePowerIntervalFraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "governanceSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialise", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastRewardedFtsoAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notInitializedFtsos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oldFtsoManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceSubmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "productionMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeFtso", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "replaceFtso",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceFtsosBulk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardEpochDurationSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardEpochs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardEpochsStartTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFallbackMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFtsoAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFtsoAssetFtsos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFtsoFallbackMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernanceParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInitialRewardData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardEpochDurationSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpdateOnRewardEpochSwitchover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotePowerIntervalFraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "showLastRevertedError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "showRevertedErrors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "supply", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "switchToFallbackMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "switchToProductionMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timelockedCalls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateContractAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOnRewardEpochSwitchover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voterWhitelister",
    data: BytesLike
  ): Result;
}

export namespace AccruingUnearnedRewardsFailedEvent {
  export type InputTuple = [epochId: BigNumberish];
  export type OutputTuple = [epochId: bigint];
  export interface OutputObject {
    epochId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CleanupBlockNumberManagerFailedForBlockEvent {
  export type InputTuple = [blockNumber: BigNumberish];
  export type OutputTuple = [blockNumber: bigint];
  export interface OutputObject {
    blockNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClosingExpiredRewardEpochFailedEvent {
  export type InputTuple = [rewardEpoch: BigNumberish];
  export type OutputTuple = [rewardEpoch: bigint];
  export interface OutputObject {
    rewardEpoch: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractRevertErrorEvent {
  export type InputTuple = [
    theContract: AddressLike,
    atBlock: BigNumberish,
    theMessage: string
  ];
  export type OutputTuple = [
    theContract: string,
    atBlock: bigint,
    theMessage: string
  ];
  export interface OutputObject {
    theContract: string;
    atBlock: bigint;
    theMessage: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DistributingRewardsFailedEvent {
  export type InputTuple = [ftso: AddressLike, epochId: BigNumberish];
  export type OutputTuple = [ftso: string, epochId: bigint];
  export interface OutputObject {
    ftso: string;
    epochId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FallbackModeEvent {
  export type InputTuple = [fallbackMode: boolean];
  export type OutputTuple = [fallbackMode: boolean];
  export interface OutputObject {
    fallbackMode: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FinalizingPriceEpochFailedEvent {
  export type InputTuple = [
    ftso: AddressLike,
    epochId: BigNumberish,
    failingType: BigNumberish
  ];
  export type OutputTuple = [
    ftso: string,
    epochId: bigint,
    failingType: bigint
  ];
  export interface OutputObject {
    ftso: string;
    epochId: bigint;
    failingType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FtsoAddedEvent {
  export type InputTuple = [ftso: AddressLike, add: boolean];
  export type OutputTuple = [ftso: string, add: boolean];
  export interface OutputObject {
    ftso: string;
    add: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FtsoDeactivationFailedEvent {
  export type InputTuple = [ftso: AddressLike];
  export type OutputTuple = [ftso: string];
  export interface OutputObject {
    ftso: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FtsoFallbackModeEvent {
  export type InputTuple = [ftso: AddressLike, fallbackMode: boolean];
  export type OutputTuple = [ftso: string, fallbackMode: boolean];
  export interface OutputObject {
    ftso: string;
    fallbackMode: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernanceCallTimelockedEvent {
  export type InputTuple = [
    selector: BytesLike,
    allowedAfterTimestamp: BigNumberish,
    encodedCall: BytesLike
  ];
  export type OutputTuple = [
    selector: string,
    allowedAfterTimestamp: bigint,
    encodedCall: string
  ];
  export interface OutputObject {
    selector: string;
    allowedAfterTimestamp: bigint;
    encodedCall: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernanceInitialisedEvent {
  export type InputTuple = [initialGovernance: AddressLike];
  export type OutputTuple = [initialGovernance: string];
  export interface OutputObject {
    initialGovernance: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernedProductionModeEnteredEvent {
  export type InputTuple = [governanceSettings: AddressLike];
  export type OutputTuple = [governanceSettings: string];
  export interface OutputObject {
    governanceSettings: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializingCurrentEpochStateForRevealFailedEvent {
  export type InputTuple = [ftso: AddressLike, epochId: BigNumberish];
  export type OutputTuple = [ftso: string, epochId: bigint];
  export interface OutputObject {
    ftso: string;
    epochId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceEpochFinalizedEvent {
  export type InputTuple = [
    chosenFtso: AddressLike,
    rewardEpochId: BigNumberish
  ];
  export type OutputTuple = [chosenFtso: string, rewardEpochId: bigint];
  export interface OutputObject {
    chosenFtso: string;
    rewardEpochId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardEpochFinalizedEvent {
  export type InputTuple = [
    votepowerBlock: BigNumberish,
    startBlock: BigNumberish
  ];
  export type OutputTuple = [votepowerBlock: bigint, startBlock: bigint];
  export interface OutputObject {
    votepowerBlock: bigint;
    startBlock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimelockedGovernanceCallCanceledEvent {
  export type InputTuple = [selector: BytesLike, timestamp: BigNumberish];
  export type OutputTuple = [selector: string, timestamp: bigint];
  export interface OutputObject {
    selector: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimelockedGovernanceCallExecutedEvent {
  export type InputTuple = [selector: BytesLike, timestamp: BigNumberish];
  export type OutputTuple = [selector: string, timestamp: bigint];
  export interface OutputObject {
    selector: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatingActiveValidatorsTriggerFailedEvent {
  export type InputTuple = [rewardEpoch: BigNumberish];
  export type OutputTuple = [rewardEpoch: bigint];
  export interface OutputObject {
    rewardEpoch: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FtsoManagerOld extends BaseContract {
  connect(runner?: ContractRunner | null): FtsoManagerOld;
  waitForDeployment(): Promise<this>;

  interface: FtsoManagerOldInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_TRUSTED_ADDRESSES_LENGTH: TypedContractMethod<[], [bigint], "view">;

  activate: TypedContractMethod<[], [void], "nonpayable">;

  active: TypedContractMethod<[], [boolean], "view">;

  addFtso: TypedContractMethod<[_ftso: AddressLike], [void], "nonpayable">;

  addFtsosBulk: TypedContractMethod<
    [_ftsos: AddressLike[]],
    [void],
    "nonpayable"
  >;

  cancelGovernanceCall: TypedContractMethod<
    [_selector: BytesLike],
    [void],
    "nonpayable"
  >;

  cleanupBlockNumberManager: TypedContractMethod<[], [string], "view">;

  currentRewardEpochEnds: TypedContractMethod<[], [bigint], "view">;

  daemonize: TypedContractMethod<[], [boolean], "nonpayable">;

  deactivateFtsos: TypedContractMethod<
    [_ftsos: AddressLike[]],
    [void],
    "nonpayable"
  >;

  errorData: TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        totalRevertedErrors: bigint;
        lastErrorTypeIndex: bigint;
      }
    ],
    "view"
  >;

  executeGovernanceCall: TypedContractMethod<
    [_selector: BytesLike],
    [void],
    "nonpayable"
  >;

  flareDaemon: TypedContractMethod<[], [string], "view">;

  ftsoManagement: TypedContractMethod<
    [],
    [[string, string] & { ftsoRegistry: string; voterWhitelister: string }],
    "view"
  >;

  ftsoRegistry: TypedContractMethod<[], [string], "view">;

  getAddressUpdater: TypedContractMethod<[], [string], "view">;

  getContractName: TypedContractMethod<[], [string], "view">;

  getCurrentPriceEpochData: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        _priceEpochId: bigint;
        _priceEpochStartTimestamp: bigint;
        _priceEpochEndTimestamp: bigint;
        _priceEpochRevealEndTimestamp: bigint;
        _currentTimestamp: bigint;
      }
    ],
    "view"
  >;

  getCurrentPriceEpochId: TypedContractMethod<[], [bigint], "view">;

  getCurrentRewardEpoch: TypedContractMethod<[], [bigint], "view">;

  getFallbackMode: TypedContractMethod<
    [],
    [
      [boolean, string[], boolean[]] & {
        _fallbackMode: boolean;
        _ftsos: string[];
        _ftsoInFallbackMode: boolean[];
      }
    ],
    "view"
  >;

  getFtsos: TypedContractMethod<[], [string[]], "view">;

  getGovernanceParameters: TypedContractMethod<
    [],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string[],
        boolean,
        boolean
      ] & {
        _maxVotePowerNatThresholdFraction: bigint;
        _maxVotePowerAssetThresholdFraction: bigint;
        _lowAssetUSDThreshold: bigint;
        _highAssetUSDThreshold: bigint;
        _highAssetTurnoutThresholdBIPS: bigint;
        _lowNatTurnoutThresholdBIPS: bigint;
        _rewardExpiryOffsetSeconds: bigint;
        _trustedAddresses: string[];
        _initialized: boolean;
        _changed: boolean;
      }
    ],
    "view"
  >;

  getLastUnprocessedPriceEpochData: TypedContractMethod<
    [],
    [
      [bigint, bigint, boolean] & {
        _lastUnprocessedPriceEpoch: bigint;
        _lastUnprocessedPriceEpochRevealEnds: bigint;
        _lastUnprocessedPriceEpochInitialized: boolean;
      }
    ],
    "view"
  >;

  getPriceEpochConfiguration: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        _firstPriceEpochStartTs: bigint;
        _priceEpochDurationSeconds: bigint;
        _revealEpochDurationSeconds: bigint;
      }
    ],
    "view"
  >;

  getPriceSubmitter: TypedContractMethod<[], [string], "view">;

  getRewardEpochConfiguration: TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        _firstRewardEpochStartTs: bigint;
        _rewardEpochDurationSeconds: bigint;
      }
    ],
    "view"
  >;

  getRewardEpochData: TypedContractMethod<
    [_rewardEpochId: BigNumberish],
    [IIFtsoManager.RewardEpochDataStructOutput],
    "view"
  >;

  getRewardEpochToExpireNext: TypedContractMethod<[], [bigint], "view">;

  getRewardEpochVotePowerBlock: TypedContractMethod<
    [_rewardEpoch: BigNumberish],
    [bigint],
    "view"
  >;

  getVotePowerIntervalFraction: TypedContractMethod<[], [bigint], "view">;

  governance: TypedContractMethod<[], [string], "view">;

  governanceSettings: TypedContractMethod<[], [string], "view">;

  initialise: TypedContractMethod<
    [_initialGovernance: AddressLike],
    [void],
    "nonpayable"
  >;

  lastRewardedFtsoAddress: TypedContractMethod<[], [string], "view">;

  notInitializedFtsos: TypedContractMethod<
    [_ftso: AddressLike],
    [boolean],
    "view"
  >;

  oldFtsoManager: TypedContractMethod<[], [string], "view">;

  priceSubmitter: TypedContractMethod<[], [string], "view">;

  productionMode: TypedContractMethod<[], [boolean], "view">;

  removeFtso: TypedContractMethod<[_ftso: AddressLike], [void], "nonpayable">;

  replaceFtso: TypedContractMethod<
    [
      _ftsoToAdd: AddressLike,
      _copyCurrentPrice: boolean,
      _copyAssetOrAssetFtsos: boolean
    ],
    [void],
    "nonpayable"
  >;

  replaceFtsosBulk: TypedContractMethod<
    [
      _ftsosToAdd: AddressLike[],
      _copyCurrentPrice: boolean,
      _copyAssetOrAssetFtsos: boolean
    ],
    [void],
    "nonpayable"
  >;

  rewardEpochDurationSeconds: TypedContractMethod<[], [bigint], "view">;

  rewardEpochs: TypedContractMethod<
    [_rewardEpochId: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        _votepowerBlock: bigint;
        _startBlock: bigint;
        _startTimestamp: bigint;
      }
    ],
    "view"
  >;

  rewardEpochsStartTs: TypedContractMethod<[], [bigint], "view">;

  rewardManager: TypedContractMethod<[], [string], "view">;

  setFallbackMode: TypedContractMethod<
    [_fallbackMode: boolean],
    [void],
    "nonpayable"
  >;

  setFtsoAsset: TypedContractMethod<
    [_ftso: AddressLike, _asset: AddressLike],
    [void],
    "nonpayable"
  >;

  setFtsoAssetFtsos: TypedContractMethod<
    [_ftso: AddressLike, _assetFtsos: AddressLike[]],
    [void],
    "nonpayable"
  >;

  setFtsoFallbackMode: TypedContractMethod<
    [_ftso: AddressLike, _fallbackMode: boolean],
    [void],
    "nonpayable"
  >;

  setGovernanceParameters: TypedContractMethod<
    [
      _maxVotePowerNatThresholdFraction: BigNumberish,
      _maxVotePowerAssetThresholdFraction: BigNumberish,
      _lowAssetUSDThreshold: BigNumberish,
      _highAssetUSDThreshold: BigNumberish,
      _highAssetTurnoutThresholdBIPS: BigNumberish,
      _lowNatTurnoutThresholdBIPS: BigNumberish,
      _rewardExpiryOffsetSeconds: BigNumberish,
      _trustedAddresses: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;

  setInitialRewardData: TypedContractMethod<
    [
      _nextRewardEpochToExpire: BigNumberish,
      _rewardEpochsLength: BigNumberish,
      _currentRewardEpochEnds: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setRewardEpochDurationSeconds: TypedContractMethod<
    [_rewardEpochDurationSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;

  setUpdateOnRewardEpochSwitchover: TypedContractMethod<
    [_updateValidators: AddressLike],
    [void],
    "nonpayable"
  >;

  setVotePowerIntervalFraction: TypedContractMethod<
    [_votePowerIntervalFraction: BigNumberish],
    [void],
    "nonpayable"
  >;

  settings: TypedContractMethod<
    [],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        maxVotePowerNatThresholdFraction: bigint;
        maxVotePowerAssetThresholdFraction: bigint;
        lowAssetUSDThreshold: bigint;
        highAssetUSDThreshold: bigint;
        highAssetTurnoutThresholdBIPS: bigint;
        lowNatTurnoutThresholdBIPS: bigint;
        rewardExpiryOffsetSeconds: bigint;
        changed: boolean;
        initialized: boolean;
      }
    ],
    "view"
  >;

  showLastRevertedError: TypedContractMethod<
    [],
    [
      [bigint[], bigint[], string[], string[], bigint] & {
        _lastErrorBlock: bigint[];
        _numErrors: bigint[];
        _errorString: string[];
        _erroringContract: string[];
        _totalRevertedErrors: bigint;
      }
    ],
    "view"
  >;

  showRevertedErrors: TypedContractMethod<
    [startIndex: BigNumberish, numErrorTypesToShow: BigNumberish],
    [
      [bigint[], bigint[], string[], string[], bigint] & {
        _lastErrorBlock: bigint[];
        _numErrors: bigint[];
        _errorString: string[];
        _erroringContract: string[];
        _totalRevertedErrors: bigint;
      }
    ],
    "view"
  >;

  supply: TypedContractMethod<[], [string], "view">;

  switchToFallbackMode: TypedContractMethod<[], [boolean], "nonpayable">;

  switchToProductionMode: TypedContractMethod<[], [void], "nonpayable">;

  timelockedCalls: TypedContractMethod<
    [arg0: BytesLike],
    [[bigint, string] & { allowedAfterTimestamp: bigint; encodedCall: string }],
    "view"
  >;

  updateContractAddresses: TypedContractMethod<
    [_contractNameHashes: BytesLike[], _contractAddresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  updateOnRewardEpochSwitchover: TypedContractMethod<[], [string], "view">;

  voterWhitelister: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_TRUSTED_ADDRESSES_LENGTH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "activate"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "active"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "addFtso"
  ): TypedContractMethod<[_ftso: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addFtsosBulk"
  ): TypedContractMethod<[_ftsos: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelGovernanceCall"
  ): TypedContractMethod<[_selector: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cleanupBlockNumberManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "currentRewardEpochEnds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "daemonize"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "deactivateFtsos"
  ): TypedContractMethod<[_ftsos: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "errorData"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        totalRevertedErrors: bigint;
        lastErrorTypeIndex: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "executeGovernanceCall"
  ): TypedContractMethod<[_selector: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "flareDaemon"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ftsoManagement"
  ): TypedContractMethod<
    [],
    [[string, string] & { ftsoRegistry: string; voterWhitelister: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "ftsoRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAddressUpdater"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getContractName"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCurrentPriceEpochData"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        _priceEpochId: bigint;
        _priceEpochStartTimestamp: bigint;
        _priceEpochEndTimestamp: bigint;
        _priceEpochRevealEndTimestamp: bigint;
        _currentTimestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentPriceEpochId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentRewardEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFallbackMode"
  ): TypedContractMethod<
    [],
    [
      [boolean, string[], boolean[]] & {
        _fallbackMode: boolean;
        _ftsos: string[];
        _ftsoInFallbackMode: boolean[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFtsos"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getGovernanceParameters"
  ): TypedContractMethod<
    [],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string[],
        boolean,
        boolean
      ] & {
        _maxVotePowerNatThresholdFraction: bigint;
        _maxVotePowerAssetThresholdFraction: bigint;
        _lowAssetUSDThreshold: bigint;
        _highAssetUSDThreshold: bigint;
        _highAssetTurnoutThresholdBIPS: bigint;
        _lowNatTurnoutThresholdBIPS: bigint;
        _rewardExpiryOffsetSeconds: bigint;
        _trustedAddresses: string[];
        _initialized: boolean;
        _changed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLastUnprocessedPriceEpochData"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, boolean] & {
        _lastUnprocessedPriceEpoch: bigint;
        _lastUnprocessedPriceEpochRevealEnds: bigint;
        _lastUnprocessedPriceEpochInitialized: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPriceEpochConfiguration"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        _firstPriceEpochStartTs: bigint;
        _priceEpochDurationSeconds: bigint;
        _revealEpochDurationSeconds: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPriceSubmitter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRewardEpochConfiguration"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        _firstRewardEpochStartTs: bigint;
        _rewardEpochDurationSeconds: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRewardEpochData"
  ): TypedContractMethod<
    [_rewardEpochId: BigNumberish],
    [IIFtsoManager.RewardEpochDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRewardEpochToExpireNext"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRewardEpochVotePowerBlock"
  ): TypedContractMethod<[_rewardEpoch: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVotePowerIntervalFraction"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "governance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "governanceSettings"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialise"
  ): TypedContractMethod<
    [_initialGovernance: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lastRewardedFtsoAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "notInitializedFtsos"
  ): TypedContractMethod<[_ftso: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "oldFtsoManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "priceSubmitter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "productionMode"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeFtso"
  ): TypedContractMethod<[_ftso: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "replaceFtso"
  ): TypedContractMethod<
    [
      _ftsoToAdd: AddressLike,
      _copyCurrentPrice: boolean,
      _copyAssetOrAssetFtsos: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "replaceFtsosBulk"
  ): TypedContractMethod<
    [
      _ftsosToAdd: AddressLike[],
      _copyCurrentPrice: boolean,
      _copyAssetOrAssetFtsos: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rewardEpochDurationSeconds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardEpochs"
  ): TypedContractMethod<
    [_rewardEpochId: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        _votepowerBlock: bigint;
        _startBlock: bigint;
        _startTimestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "rewardEpochsStartTs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setFallbackMode"
  ): TypedContractMethod<[_fallbackMode: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFtsoAsset"
  ): TypedContractMethod<
    [_ftso: AddressLike, _asset: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFtsoAssetFtsos"
  ): TypedContractMethod<
    [_ftso: AddressLike, _assetFtsos: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFtsoFallbackMode"
  ): TypedContractMethod<
    [_ftso: AddressLike, _fallbackMode: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGovernanceParameters"
  ): TypedContractMethod<
    [
      _maxVotePowerNatThresholdFraction: BigNumberish,
      _maxVotePowerAssetThresholdFraction: BigNumberish,
      _lowAssetUSDThreshold: BigNumberish,
      _highAssetUSDThreshold: BigNumberish,
      _highAssetTurnoutThresholdBIPS: BigNumberish,
      _lowNatTurnoutThresholdBIPS: BigNumberish,
      _rewardExpiryOffsetSeconds: BigNumberish,
      _trustedAddresses: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setInitialRewardData"
  ): TypedContractMethod<
    [
      _nextRewardEpochToExpire: BigNumberish,
      _rewardEpochsLength: BigNumberish,
      _currentRewardEpochEnds: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRewardEpochDurationSeconds"
  ): TypedContractMethod<
    [_rewardEpochDurationSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUpdateOnRewardEpochSwitchover"
  ): TypedContractMethod<
    [_updateValidators: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setVotePowerIntervalFraction"
  ): TypedContractMethod<
    [_votePowerIntervalFraction: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "settings"
  ): TypedContractMethod<
    [],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        maxVotePowerNatThresholdFraction: bigint;
        maxVotePowerAssetThresholdFraction: bigint;
        lowAssetUSDThreshold: bigint;
        highAssetUSDThreshold: bigint;
        highAssetTurnoutThresholdBIPS: bigint;
        lowNatTurnoutThresholdBIPS: bigint;
        rewardExpiryOffsetSeconds: bigint;
        changed: boolean;
        initialized: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "showLastRevertedError"
  ): TypedContractMethod<
    [],
    [
      [bigint[], bigint[], string[], string[], bigint] & {
        _lastErrorBlock: bigint[];
        _numErrors: bigint[];
        _errorString: string[];
        _erroringContract: string[];
        _totalRevertedErrors: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "showRevertedErrors"
  ): TypedContractMethod<
    [startIndex: BigNumberish, numErrorTypesToShow: BigNumberish],
    [
      [bigint[], bigint[], string[], string[], bigint] & {
        _lastErrorBlock: bigint[];
        _numErrors: bigint[];
        _errorString: string[];
        _erroringContract: string[];
        _totalRevertedErrors: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "supply"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "switchToFallbackMode"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "switchToProductionMode"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "timelockedCalls"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[bigint, string] & { allowedAfterTimestamp: bigint; encodedCall: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateContractAddresses"
  ): TypedContractMethod<
    [_contractNameHashes: BytesLike[], _contractAddresses: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateOnRewardEpochSwitchover"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "voterWhitelister"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AccruingUnearnedRewardsFailed"
  ): TypedContractEvent<
    AccruingUnearnedRewardsFailedEvent.InputTuple,
    AccruingUnearnedRewardsFailedEvent.OutputTuple,
    AccruingUnearnedRewardsFailedEvent.OutputObject
  >;
  getEvent(
    key: "CleanupBlockNumberManagerFailedForBlock"
  ): TypedContractEvent<
    CleanupBlockNumberManagerFailedForBlockEvent.InputTuple,
    CleanupBlockNumberManagerFailedForBlockEvent.OutputTuple,
    CleanupBlockNumberManagerFailedForBlockEvent.OutputObject
  >;
  getEvent(
    key: "ClosingExpiredRewardEpochFailed"
  ): TypedContractEvent<
    ClosingExpiredRewardEpochFailedEvent.InputTuple,
    ClosingExpiredRewardEpochFailedEvent.OutputTuple,
    ClosingExpiredRewardEpochFailedEvent.OutputObject
  >;
  getEvent(
    key: "ContractRevertError"
  ): TypedContractEvent<
    ContractRevertErrorEvent.InputTuple,
    ContractRevertErrorEvent.OutputTuple,
    ContractRevertErrorEvent.OutputObject
  >;
  getEvent(
    key: "DistributingRewardsFailed"
  ): TypedContractEvent<
    DistributingRewardsFailedEvent.InputTuple,
    DistributingRewardsFailedEvent.OutputTuple,
    DistributingRewardsFailedEvent.OutputObject
  >;
  getEvent(
    key: "FallbackMode"
  ): TypedContractEvent<
    FallbackModeEvent.InputTuple,
    FallbackModeEvent.OutputTuple,
    FallbackModeEvent.OutputObject
  >;
  getEvent(
    key: "FinalizingPriceEpochFailed"
  ): TypedContractEvent<
    FinalizingPriceEpochFailedEvent.InputTuple,
    FinalizingPriceEpochFailedEvent.OutputTuple,
    FinalizingPriceEpochFailedEvent.OutputObject
  >;
  getEvent(
    key: "FtsoAdded"
  ): TypedContractEvent<
    FtsoAddedEvent.InputTuple,
    FtsoAddedEvent.OutputTuple,
    FtsoAddedEvent.OutputObject
  >;
  getEvent(
    key: "FtsoDeactivationFailed"
  ): TypedContractEvent<
    FtsoDeactivationFailedEvent.InputTuple,
    FtsoDeactivationFailedEvent.OutputTuple,
    FtsoDeactivationFailedEvent.OutputObject
  >;
  getEvent(
    key: "FtsoFallbackMode"
  ): TypedContractEvent<
    FtsoFallbackModeEvent.InputTuple,
    FtsoFallbackModeEvent.OutputTuple,
    FtsoFallbackModeEvent.OutputObject
  >;
  getEvent(
    key: "GovernanceCallTimelocked"
  ): TypedContractEvent<
    GovernanceCallTimelockedEvent.InputTuple,
    GovernanceCallTimelockedEvent.OutputTuple,
    GovernanceCallTimelockedEvent.OutputObject
  >;
  getEvent(
    key: "GovernanceInitialised"
  ): TypedContractEvent<
    GovernanceInitialisedEvent.InputTuple,
    GovernanceInitialisedEvent.OutputTuple,
    GovernanceInitialisedEvent.OutputObject
  >;
  getEvent(
    key: "GovernedProductionModeEntered"
  ): TypedContractEvent<
    GovernedProductionModeEnteredEvent.InputTuple,
    GovernedProductionModeEnteredEvent.OutputTuple,
    GovernedProductionModeEnteredEvent.OutputObject
  >;
  getEvent(
    key: "InitializingCurrentEpochStateForRevealFailed"
  ): TypedContractEvent<
    InitializingCurrentEpochStateForRevealFailedEvent.InputTuple,
    InitializingCurrentEpochStateForRevealFailedEvent.OutputTuple,
    InitializingCurrentEpochStateForRevealFailedEvent.OutputObject
  >;
  getEvent(
    key: "PriceEpochFinalized"
  ): TypedContractEvent<
    PriceEpochFinalizedEvent.InputTuple,
    PriceEpochFinalizedEvent.OutputTuple,
    PriceEpochFinalizedEvent.OutputObject
  >;
  getEvent(
    key: "RewardEpochFinalized"
  ): TypedContractEvent<
    RewardEpochFinalizedEvent.InputTuple,
    RewardEpochFinalizedEvent.OutputTuple,
    RewardEpochFinalizedEvent.OutputObject
  >;
  getEvent(
    key: "TimelockedGovernanceCallCanceled"
  ): TypedContractEvent<
    TimelockedGovernanceCallCanceledEvent.InputTuple,
    TimelockedGovernanceCallCanceledEvent.OutputTuple,
    TimelockedGovernanceCallCanceledEvent.OutputObject
  >;
  getEvent(
    key: "TimelockedGovernanceCallExecuted"
  ): TypedContractEvent<
    TimelockedGovernanceCallExecutedEvent.InputTuple,
    TimelockedGovernanceCallExecutedEvent.OutputTuple,
    TimelockedGovernanceCallExecutedEvent.OutputObject
  >;
  getEvent(
    key: "UpdatingActiveValidatorsTriggerFailed"
  ): TypedContractEvent<
    UpdatingActiveValidatorsTriggerFailedEvent.InputTuple,
    UpdatingActiveValidatorsTriggerFailedEvent.OutputTuple,
    UpdatingActiveValidatorsTriggerFailedEvent.OutputObject
  >;

  filters: {
    "AccruingUnearnedRewardsFailed(uint256)": TypedContractEvent<
      AccruingUnearnedRewardsFailedEvent.InputTuple,
      AccruingUnearnedRewardsFailedEvent.OutputTuple,
      AccruingUnearnedRewardsFailedEvent.OutputObject
    >;
    AccruingUnearnedRewardsFailed: TypedContractEvent<
      AccruingUnearnedRewardsFailedEvent.InputTuple,
      AccruingUnearnedRewardsFailedEvent.OutputTuple,
      AccruingUnearnedRewardsFailedEvent.OutputObject
    >;

    "CleanupBlockNumberManagerFailedForBlock(uint256)": TypedContractEvent<
      CleanupBlockNumberManagerFailedForBlockEvent.InputTuple,
      CleanupBlockNumberManagerFailedForBlockEvent.OutputTuple,
      CleanupBlockNumberManagerFailedForBlockEvent.OutputObject
    >;
    CleanupBlockNumberManagerFailedForBlock: TypedContractEvent<
      CleanupBlockNumberManagerFailedForBlockEvent.InputTuple,
      CleanupBlockNumberManagerFailedForBlockEvent.OutputTuple,
      CleanupBlockNumberManagerFailedForBlockEvent.OutputObject
    >;

    "ClosingExpiredRewardEpochFailed(uint256)": TypedContractEvent<
      ClosingExpiredRewardEpochFailedEvent.InputTuple,
      ClosingExpiredRewardEpochFailedEvent.OutputTuple,
      ClosingExpiredRewardEpochFailedEvent.OutputObject
    >;
    ClosingExpiredRewardEpochFailed: TypedContractEvent<
      ClosingExpiredRewardEpochFailedEvent.InputTuple,
      ClosingExpiredRewardEpochFailedEvent.OutputTuple,
      ClosingExpiredRewardEpochFailedEvent.OutputObject
    >;

    "ContractRevertError(address,uint256,string)": TypedContractEvent<
      ContractRevertErrorEvent.InputTuple,
      ContractRevertErrorEvent.OutputTuple,
      ContractRevertErrorEvent.OutputObject
    >;
    ContractRevertError: TypedContractEvent<
      ContractRevertErrorEvent.InputTuple,
      ContractRevertErrorEvent.OutputTuple,
      ContractRevertErrorEvent.OutputObject
    >;

    "DistributingRewardsFailed(address,uint256)": TypedContractEvent<
      DistributingRewardsFailedEvent.InputTuple,
      DistributingRewardsFailedEvent.OutputTuple,
      DistributingRewardsFailedEvent.OutputObject
    >;
    DistributingRewardsFailed: TypedContractEvent<
      DistributingRewardsFailedEvent.InputTuple,
      DistributingRewardsFailedEvent.OutputTuple,
      DistributingRewardsFailedEvent.OutputObject
    >;

    "FallbackMode(bool)": TypedContractEvent<
      FallbackModeEvent.InputTuple,
      FallbackModeEvent.OutputTuple,
      FallbackModeEvent.OutputObject
    >;
    FallbackMode: TypedContractEvent<
      FallbackModeEvent.InputTuple,
      FallbackModeEvent.OutputTuple,
      FallbackModeEvent.OutputObject
    >;

    "FinalizingPriceEpochFailed(address,uint256,uint8)": TypedContractEvent<
      FinalizingPriceEpochFailedEvent.InputTuple,
      FinalizingPriceEpochFailedEvent.OutputTuple,
      FinalizingPriceEpochFailedEvent.OutputObject
    >;
    FinalizingPriceEpochFailed: TypedContractEvent<
      FinalizingPriceEpochFailedEvent.InputTuple,
      FinalizingPriceEpochFailedEvent.OutputTuple,
      FinalizingPriceEpochFailedEvent.OutputObject
    >;

    "FtsoAdded(address,bool)": TypedContractEvent<
      FtsoAddedEvent.InputTuple,
      FtsoAddedEvent.OutputTuple,
      FtsoAddedEvent.OutputObject
    >;
    FtsoAdded: TypedContractEvent<
      FtsoAddedEvent.InputTuple,
      FtsoAddedEvent.OutputTuple,
      FtsoAddedEvent.OutputObject
    >;

    "FtsoDeactivationFailed(address)": TypedContractEvent<
      FtsoDeactivationFailedEvent.InputTuple,
      FtsoDeactivationFailedEvent.OutputTuple,
      FtsoDeactivationFailedEvent.OutputObject
    >;
    FtsoDeactivationFailed: TypedContractEvent<
      FtsoDeactivationFailedEvent.InputTuple,
      FtsoDeactivationFailedEvent.OutputTuple,
      FtsoDeactivationFailedEvent.OutputObject
    >;

    "FtsoFallbackMode(address,bool)": TypedContractEvent<
      FtsoFallbackModeEvent.InputTuple,
      FtsoFallbackModeEvent.OutputTuple,
      FtsoFallbackModeEvent.OutputObject
    >;
    FtsoFallbackMode: TypedContractEvent<
      FtsoFallbackModeEvent.InputTuple,
      FtsoFallbackModeEvent.OutputTuple,
      FtsoFallbackModeEvent.OutputObject
    >;

    "GovernanceCallTimelocked(bytes4,uint256,bytes)": TypedContractEvent<
      GovernanceCallTimelockedEvent.InputTuple,
      GovernanceCallTimelockedEvent.OutputTuple,
      GovernanceCallTimelockedEvent.OutputObject
    >;
    GovernanceCallTimelocked: TypedContractEvent<
      GovernanceCallTimelockedEvent.InputTuple,
      GovernanceCallTimelockedEvent.OutputTuple,
      GovernanceCallTimelockedEvent.OutputObject
    >;

    "GovernanceInitialised(address)": TypedContractEvent<
      GovernanceInitialisedEvent.InputTuple,
      GovernanceInitialisedEvent.OutputTuple,
      GovernanceInitialisedEvent.OutputObject
    >;
    GovernanceInitialised: TypedContractEvent<
      GovernanceInitialisedEvent.InputTuple,
      GovernanceInitialisedEvent.OutputTuple,
      GovernanceInitialisedEvent.OutputObject
    >;

    "GovernedProductionModeEntered(address)": TypedContractEvent<
      GovernedProductionModeEnteredEvent.InputTuple,
      GovernedProductionModeEnteredEvent.OutputTuple,
      GovernedProductionModeEnteredEvent.OutputObject
    >;
    GovernedProductionModeEntered: TypedContractEvent<
      GovernedProductionModeEnteredEvent.InputTuple,
      GovernedProductionModeEnteredEvent.OutputTuple,
      GovernedProductionModeEnteredEvent.OutputObject
    >;

    "InitializingCurrentEpochStateForRevealFailed(address,uint256)": TypedContractEvent<
      InitializingCurrentEpochStateForRevealFailedEvent.InputTuple,
      InitializingCurrentEpochStateForRevealFailedEvent.OutputTuple,
      InitializingCurrentEpochStateForRevealFailedEvent.OutputObject
    >;
    InitializingCurrentEpochStateForRevealFailed: TypedContractEvent<
      InitializingCurrentEpochStateForRevealFailedEvent.InputTuple,
      InitializingCurrentEpochStateForRevealFailedEvent.OutputTuple,
      InitializingCurrentEpochStateForRevealFailedEvent.OutputObject
    >;

    "PriceEpochFinalized(address,uint256)": TypedContractEvent<
      PriceEpochFinalizedEvent.InputTuple,
      PriceEpochFinalizedEvent.OutputTuple,
      PriceEpochFinalizedEvent.OutputObject
    >;
    PriceEpochFinalized: TypedContractEvent<
      PriceEpochFinalizedEvent.InputTuple,
      PriceEpochFinalizedEvent.OutputTuple,
      PriceEpochFinalizedEvent.OutputObject
    >;

    "RewardEpochFinalized(uint256,uint256)": TypedContractEvent<
      RewardEpochFinalizedEvent.InputTuple,
      RewardEpochFinalizedEvent.OutputTuple,
      RewardEpochFinalizedEvent.OutputObject
    >;
    RewardEpochFinalized: TypedContractEvent<
      RewardEpochFinalizedEvent.InputTuple,
      RewardEpochFinalizedEvent.OutputTuple,
      RewardEpochFinalizedEvent.OutputObject
    >;

    "TimelockedGovernanceCallCanceled(bytes4,uint256)": TypedContractEvent<
      TimelockedGovernanceCallCanceledEvent.InputTuple,
      TimelockedGovernanceCallCanceledEvent.OutputTuple,
      TimelockedGovernanceCallCanceledEvent.OutputObject
    >;
    TimelockedGovernanceCallCanceled: TypedContractEvent<
      TimelockedGovernanceCallCanceledEvent.InputTuple,
      TimelockedGovernanceCallCanceledEvent.OutputTuple,
      TimelockedGovernanceCallCanceledEvent.OutputObject
    >;

    "TimelockedGovernanceCallExecuted(bytes4,uint256)": TypedContractEvent<
      TimelockedGovernanceCallExecutedEvent.InputTuple,
      TimelockedGovernanceCallExecutedEvent.OutputTuple,
      TimelockedGovernanceCallExecutedEvent.OutputObject
    >;
    TimelockedGovernanceCallExecuted: TypedContractEvent<
      TimelockedGovernanceCallExecutedEvent.InputTuple,
      TimelockedGovernanceCallExecutedEvent.OutputTuple,
      TimelockedGovernanceCallExecutedEvent.OutputObject
    >;

    "UpdatingActiveValidatorsTriggerFailed(uint256)": TypedContractEvent<
      UpdatingActiveValidatorsTriggerFailedEvent.InputTuple,
      UpdatingActiveValidatorsTriggerFailedEvent.OutputTuple,
      UpdatingActiveValidatorsTriggerFailedEvent.OutputObject
    >;
    UpdatingActiveValidatorsTriggerFailed: TypedContractEvent<
      UpdatingActiveValidatorsTriggerFailedEvent.InputTuple,
      UpdatingActiveValidatorsTriggerFailedEvent.OutputTuple,
      UpdatingActiveValidatorsTriggerFailedEvent.OutputObject
    >;
  };
}
