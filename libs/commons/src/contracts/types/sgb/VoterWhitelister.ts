/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface VoterWhitelisterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addFtso"
      | "cancelGovernanceCall"
      | "chillVoter"
      | "chilledUntilRewardEpoch"
      | "copyMode"
      | "copyWhitelist"
      | "defaultMaxVotersForFtso"
      | "executeGovernanceCall"
      | "ftsoManager"
      | "ftsoRegistry"
      | "getAddressUpdater"
      | "getFtsoWhitelistedPriceProviders"
      | "getFtsoWhitelistedPriceProvidersBySymbol"
      | "governance"
      | "governanceSettings"
      | "initialise"
      | "maxVotersForFtso"
      | "oldVoterWhitelister"
      | "priceSubmitter"
      | "productionMode"
      | "removeFtso"
      | "removeTrustedAddressFromWhitelist"
      | "requestFullVoterWhitelisting"
      | "requestWhitelistingVoter"
      | "setDefaultMaxVotersForFtso"
      | "setMaxVotersForFtso"
      | "switchToProductionMode"
      | "timelockedCalls"
      | "turnOffCopyMode"
      | "updateContractAddresses"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "GovernanceCallTimelocked"
      | "GovernanceInitialised"
      | "GovernedProductionModeEntered"
      | "TimelockedGovernanceCallCanceled"
      | "TimelockedGovernanceCallExecuted"
      | "VoterChilled"
      | "VoterRemovedFromWhitelist"
      | "VoterWhitelisted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addFtso",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelGovernanceCall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "chillVoter",
    values: [AddressLike, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "chilledUntilRewardEpoch",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "copyMode", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "copyWhitelist",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultMaxVotersForFtso",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeGovernanceCall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ftsoManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ftsoRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressUpdater",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFtsoWhitelistedPriceProviders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFtsoWhitelistedPriceProvidersBySymbol",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceSettings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialise",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxVotersForFtso",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "oldVoterWhitelister",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceSubmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "productionMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeFtso",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTrustedAddressFromWhitelist",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestFullVoterWhitelisting",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestWhitelistingVoter",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultMaxVotersForFtso",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxVotersForFtso",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "switchToProductionMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timelockedCalls",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "turnOffCopyMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateContractAddresses",
    values: [BytesLike[], AddressLike[]]
  ): string;

  decodeFunctionResult(functionFragment: "addFtso", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelGovernanceCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chillVoter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chilledUntilRewardEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "copyMode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "copyWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultMaxVotersForFtso",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeGovernanceCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ftsoManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ftsoRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddressUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFtsoWhitelistedPriceProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFtsoWhitelistedPriceProvidersBySymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "governanceSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialise", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxVotersForFtso",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oldVoterWhitelister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceSubmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "productionMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeFtso", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeTrustedAddressFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestFullVoterWhitelisting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWhitelistingVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultMaxVotersForFtso",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxVotersForFtso",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "switchToProductionMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timelockedCalls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "turnOffCopyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateContractAddresses",
    data: BytesLike
  ): Result;
}

export namespace GovernanceCallTimelockedEvent {
  export type InputTuple = [
    selector: BytesLike,
    allowedAfterTimestamp: BigNumberish,
    encodedCall: BytesLike
  ];
  export type OutputTuple = [
    selector: string,
    allowedAfterTimestamp: bigint,
    encodedCall: string
  ];
  export interface OutputObject {
    selector: string;
    allowedAfterTimestamp: bigint;
    encodedCall: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernanceInitialisedEvent {
  export type InputTuple = [initialGovernance: AddressLike];
  export type OutputTuple = [initialGovernance: string];
  export interface OutputObject {
    initialGovernance: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernedProductionModeEnteredEvent {
  export type InputTuple = [governanceSettings: AddressLike];
  export type OutputTuple = [governanceSettings: string];
  export interface OutputObject {
    governanceSettings: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimelockedGovernanceCallCanceledEvent {
  export type InputTuple = [selector: BytesLike, timestamp: BigNumberish];
  export type OutputTuple = [selector: string, timestamp: bigint];
  export interface OutputObject {
    selector: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimelockedGovernanceCallExecutedEvent {
  export type InputTuple = [selector: BytesLike, timestamp: BigNumberish];
  export type OutputTuple = [selector: string, timestamp: bigint];
  export interface OutputObject {
    selector: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoterChilledEvent {
  export type InputTuple = [voter: AddressLike, untilRewardEpoch: BigNumberish];
  export type OutputTuple = [voter: string, untilRewardEpoch: bigint];
  export interface OutputObject {
    voter: string;
    untilRewardEpoch: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoterRemovedFromWhitelistEvent {
  export type InputTuple = [voter: AddressLike, ftsoIndex: BigNumberish];
  export type OutputTuple = [voter: string, ftsoIndex: bigint];
  export interface OutputObject {
    voter: string;
    ftsoIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoterWhitelistedEvent {
  export type InputTuple = [voter: AddressLike, ftsoIndex: BigNumberish];
  export type OutputTuple = [voter: string, ftsoIndex: bigint];
  export interface OutputObject {
    voter: string;
    ftsoIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VoterWhitelister extends BaseContract {
  connect(runner?: ContractRunner | null): VoterWhitelister;
  waitForDeployment(): Promise<this>;

  interface: VoterWhitelisterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addFtso: TypedContractMethod<
    [_ftsoIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  cancelGovernanceCall: TypedContractMethod<
    [_selector: BytesLike],
    [void],
    "nonpayable"
  >;

  chillVoter: TypedContractMethod<
    [
      _voter: AddressLike,
      _noOfRewardEpochs: BigNumberish,
      _ftsoIndices: BigNumberish[]
    ],
    [[boolean[], bigint] & { _removed: boolean[]; _untilRewardEpoch: bigint }],
    "nonpayable"
  >;

  chilledUntilRewardEpoch: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  copyMode: TypedContractMethod<[], [boolean], "view">;

  copyWhitelist: TypedContractMethod<
    [_ftsoIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  defaultMaxVotersForFtso: TypedContractMethod<[], [bigint], "view">;

  executeGovernanceCall: TypedContractMethod<
    [_selector: BytesLike],
    [void],
    "nonpayable"
  >;

  ftsoManager: TypedContractMethod<[], [string], "view">;

  ftsoRegistry: TypedContractMethod<[], [string], "view">;

  getAddressUpdater: TypedContractMethod<[], [string], "view">;

  getFtsoWhitelistedPriceProviders: TypedContractMethod<
    [_ftsoIndex: BigNumberish],
    [string[]],
    "view"
  >;

  getFtsoWhitelistedPriceProvidersBySymbol: TypedContractMethod<
    [_symbol: string],
    [string[]],
    "view"
  >;

  governance: TypedContractMethod<[], [string], "view">;

  governanceSettings: TypedContractMethod<[], [string], "view">;

  initialise: TypedContractMethod<
    [_initialGovernance: AddressLike],
    [void],
    "nonpayable"
  >;

  maxVotersForFtso: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  oldVoterWhitelister: TypedContractMethod<[], [string], "view">;

  priceSubmitter: TypedContractMethod<[], [string], "view">;

  productionMode: TypedContractMethod<[], [boolean], "view">;

  removeFtso: TypedContractMethod<
    [_ftsoIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeTrustedAddressFromWhitelist: TypedContractMethod<
    [_trustedAddress: AddressLike, _ftsoIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  requestFullVoterWhitelisting: TypedContractMethod<
    [_voter: AddressLike],
    [
      [bigint[], boolean[]] & {
        _supportedIndices: bigint[];
        _success: boolean[];
      }
    ],
    "nonpayable"
  >;

  requestWhitelistingVoter: TypedContractMethod<
    [_voter: AddressLike, _ftsoIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDefaultMaxVotersForFtso: TypedContractMethod<
    [_defaultMaxVotersForFtso: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxVotersForFtso: TypedContractMethod<
    [_ftsoIndex: BigNumberish, _newMaxVoters: BigNumberish],
    [void],
    "nonpayable"
  >;

  switchToProductionMode: TypedContractMethod<[], [void], "nonpayable">;

  timelockedCalls: TypedContractMethod<
    [arg0: BytesLike],
    [[bigint, string] & { allowedAfterTimestamp: bigint; encodedCall: string }],
    "view"
  >;

  turnOffCopyMode: TypedContractMethod<[], [void], "nonpayable">;

  updateContractAddresses: TypedContractMethod<
    [_contractNameHashes: BytesLike[], _contractAddresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addFtso"
  ): TypedContractMethod<[_ftsoIndex: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelGovernanceCall"
  ): TypedContractMethod<[_selector: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "chillVoter"
  ): TypedContractMethod<
    [
      _voter: AddressLike,
      _noOfRewardEpochs: BigNumberish,
      _ftsoIndices: BigNumberish[]
    ],
    [[boolean[], bigint] & { _removed: boolean[]; _untilRewardEpoch: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "chilledUntilRewardEpoch"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "copyMode"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "copyWhitelist"
  ): TypedContractMethod<[_ftsoIndex: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "defaultMaxVotersForFtso"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "executeGovernanceCall"
  ): TypedContractMethod<[_selector: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ftsoManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ftsoRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAddressUpdater"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getFtsoWhitelistedPriceProviders"
  ): TypedContractMethod<[_ftsoIndex: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getFtsoWhitelistedPriceProvidersBySymbol"
  ): TypedContractMethod<[_symbol: string], [string[]], "view">;
  getFunction(
    nameOrSignature: "governance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "governanceSettings"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialise"
  ): TypedContractMethod<
    [_initialGovernance: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "maxVotersForFtso"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "oldVoterWhitelister"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "priceSubmitter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "productionMode"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeFtso"
  ): TypedContractMethod<[_ftsoIndex: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeTrustedAddressFromWhitelist"
  ): TypedContractMethod<
    [_trustedAddress: AddressLike, _ftsoIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestFullVoterWhitelisting"
  ): TypedContractMethod<
    [_voter: AddressLike],
    [
      [bigint[], boolean[]] & {
        _supportedIndices: bigint[];
        _success: boolean[];
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestWhitelistingVoter"
  ): TypedContractMethod<
    [_voter: AddressLike, _ftsoIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDefaultMaxVotersForFtso"
  ): TypedContractMethod<
    [_defaultMaxVotersForFtso: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxVotersForFtso"
  ): TypedContractMethod<
    [_ftsoIndex: BigNumberish, _newMaxVoters: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "switchToProductionMode"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "timelockedCalls"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[bigint, string] & { allowedAfterTimestamp: bigint; encodedCall: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "turnOffCopyMode"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateContractAddresses"
  ): TypedContractMethod<
    [_contractNameHashes: BytesLike[], _contractAddresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "GovernanceCallTimelocked"
  ): TypedContractEvent<
    GovernanceCallTimelockedEvent.InputTuple,
    GovernanceCallTimelockedEvent.OutputTuple,
    GovernanceCallTimelockedEvent.OutputObject
  >;
  getEvent(
    key: "GovernanceInitialised"
  ): TypedContractEvent<
    GovernanceInitialisedEvent.InputTuple,
    GovernanceInitialisedEvent.OutputTuple,
    GovernanceInitialisedEvent.OutputObject
  >;
  getEvent(
    key: "GovernedProductionModeEntered"
  ): TypedContractEvent<
    GovernedProductionModeEnteredEvent.InputTuple,
    GovernedProductionModeEnteredEvent.OutputTuple,
    GovernedProductionModeEnteredEvent.OutputObject
  >;
  getEvent(
    key: "TimelockedGovernanceCallCanceled"
  ): TypedContractEvent<
    TimelockedGovernanceCallCanceledEvent.InputTuple,
    TimelockedGovernanceCallCanceledEvent.OutputTuple,
    TimelockedGovernanceCallCanceledEvent.OutputObject
  >;
  getEvent(
    key: "TimelockedGovernanceCallExecuted"
  ): TypedContractEvent<
    TimelockedGovernanceCallExecutedEvent.InputTuple,
    TimelockedGovernanceCallExecutedEvent.OutputTuple,
    TimelockedGovernanceCallExecutedEvent.OutputObject
  >;
  getEvent(
    key: "VoterChilled"
  ): TypedContractEvent<
    VoterChilledEvent.InputTuple,
    VoterChilledEvent.OutputTuple,
    VoterChilledEvent.OutputObject
  >;
  getEvent(
    key: "VoterRemovedFromWhitelist"
  ): TypedContractEvent<
    VoterRemovedFromWhitelistEvent.InputTuple,
    VoterRemovedFromWhitelistEvent.OutputTuple,
    VoterRemovedFromWhitelistEvent.OutputObject
  >;
  getEvent(
    key: "VoterWhitelisted"
  ): TypedContractEvent<
    VoterWhitelistedEvent.InputTuple,
    VoterWhitelistedEvent.OutputTuple,
    VoterWhitelistedEvent.OutputObject
  >;

  filters: {
    "GovernanceCallTimelocked(bytes4,uint256,bytes)": TypedContractEvent<
      GovernanceCallTimelockedEvent.InputTuple,
      GovernanceCallTimelockedEvent.OutputTuple,
      GovernanceCallTimelockedEvent.OutputObject
    >;
    GovernanceCallTimelocked: TypedContractEvent<
      GovernanceCallTimelockedEvent.InputTuple,
      GovernanceCallTimelockedEvent.OutputTuple,
      GovernanceCallTimelockedEvent.OutputObject
    >;

    "GovernanceInitialised(address)": TypedContractEvent<
      GovernanceInitialisedEvent.InputTuple,
      GovernanceInitialisedEvent.OutputTuple,
      GovernanceInitialisedEvent.OutputObject
    >;
    GovernanceInitialised: TypedContractEvent<
      GovernanceInitialisedEvent.InputTuple,
      GovernanceInitialisedEvent.OutputTuple,
      GovernanceInitialisedEvent.OutputObject
    >;

    "GovernedProductionModeEntered(address)": TypedContractEvent<
      GovernedProductionModeEnteredEvent.InputTuple,
      GovernedProductionModeEnteredEvent.OutputTuple,
      GovernedProductionModeEnteredEvent.OutputObject
    >;
    GovernedProductionModeEntered: TypedContractEvent<
      GovernedProductionModeEnteredEvent.InputTuple,
      GovernedProductionModeEnteredEvent.OutputTuple,
      GovernedProductionModeEnteredEvent.OutputObject
    >;

    "TimelockedGovernanceCallCanceled(bytes4,uint256)": TypedContractEvent<
      TimelockedGovernanceCallCanceledEvent.InputTuple,
      TimelockedGovernanceCallCanceledEvent.OutputTuple,
      TimelockedGovernanceCallCanceledEvent.OutputObject
    >;
    TimelockedGovernanceCallCanceled: TypedContractEvent<
      TimelockedGovernanceCallCanceledEvent.InputTuple,
      TimelockedGovernanceCallCanceledEvent.OutputTuple,
      TimelockedGovernanceCallCanceledEvent.OutputObject
    >;

    "TimelockedGovernanceCallExecuted(bytes4,uint256)": TypedContractEvent<
      TimelockedGovernanceCallExecutedEvent.InputTuple,
      TimelockedGovernanceCallExecutedEvent.OutputTuple,
      TimelockedGovernanceCallExecutedEvent.OutputObject
    >;
    TimelockedGovernanceCallExecuted: TypedContractEvent<
      TimelockedGovernanceCallExecutedEvent.InputTuple,
      TimelockedGovernanceCallExecutedEvent.OutputTuple,
      TimelockedGovernanceCallExecutedEvent.OutputObject
    >;

    "VoterChilled(address,uint256)": TypedContractEvent<
      VoterChilledEvent.InputTuple,
      VoterChilledEvent.OutputTuple,
      VoterChilledEvent.OutputObject
    >;
    VoterChilled: TypedContractEvent<
      VoterChilledEvent.InputTuple,
      VoterChilledEvent.OutputTuple,
      VoterChilledEvent.OutputObject
    >;

    "VoterRemovedFromWhitelist(address,uint256)": TypedContractEvent<
      VoterRemovedFromWhitelistEvent.InputTuple,
      VoterRemovedFromWhitelistEvent.OutputTuple,
      VoterRemovedFromWhitelistEvent.OutputObject
    >;
    VoterRemovedFromWhitelist: TypedContractEvent<
      VoterRemovedFromWhitelistEvent.InputTuple,
      VoterRemovedFromWhitelistEvent.OutputTuple,
      VoterRemovedFromWhitelistEvent.OutputObject
    >;

    "VoterWhitelisted(address,uint256)": TypedContractEvent<
      VoterWhitelistedEvent.InputTuple,
      VoterWhitelistedEvent.OutputTuple,
      VoterWhitelistedEvent.OutputObject
    >;
    VoterWhitelisted: TypedContractEvent<
      VoterWhitelistedEvent.InputTuple,
      VoterWhitelistedEvent.OutputTuple,
      VoterWhitelistedEvent.OutputObject
    >;
  };
}
