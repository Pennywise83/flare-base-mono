/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface FtsoRewardManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accrueUnearnedRewards"
      | "activate"
      | "active"
      | "autoClaim"
      | "cancelGovernanceCall"
      | "claim"
      | "claimFromDataProviders"
      | "claimReward"
      | "claimRewardFromDataProviders"
      | "claimSetupManager"
      | "closeExpiredRewardEpoch"
      | "deactivate"
      | "defaultFeePercentage"
      | "distributeRewards"
      | "enableClaims"
      | "executeGovernanceCall"
      | "feePercentageUpdateOffset"
      | "firstClaimableRewardEpoch"
      | "ftsoManager"
      | "getAddressUpdater"
      | "getClaimedReward"
      | "getContractName"
      | "getCurrentRewardEpoch"
      | "getDataProviderCurrentFeePercentage"
      | "getDataProviderFeePercentage"
      | "getDataProviderPerformanceInfo"
      | "getDataProviderScheduledFeePercentageChanges"
      | "getEpochReward"
      | "getEpochsWithClaimableRewards"
      | "getEpochsWithUnclaimedRewards"
      | "getInflationAddress"
      | "getInitialRewardEpoch"
      | "getRewardEpochToExpireNext"
      | "getRewardEpochVotePowerBlock"
      | "getStateOfRewards"
      | "getStateOfRewardsFromDataProviders"
      | "getTokenPoolSupplyData"
      | "getTotals"
      | "getUnclaimedReward"
      | "governance"
      | "governanceSettings"
      | "initialise"
      | "newFtsoRewardManager"
      | "nextClaimableRewardEpoch"
      | "oldFtsoRewardManager"
      | "productionMode"
      | "receiveInflation"
      | "setDailyAuthorizedInflation"
      | "setDataProviderFeePercentage"
      | "setInitialRewardData"
      | "setNewFtsoRewardManager"
      | "switchToProductionMode"
      | "timelockedCalls"
      | "updateContractAddresses"
      | "wNat"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DailyAuthorizedInflationSet"
      | "FeePercentageChanged"
      | "FtsoRewardManagerActivated"
      | "FtsoRewardManagerDeactivated"
      | "GovernanceCallTimelocked"
      | "GovernanceInitialised"
      | "GovernedProductionModeEntered"
      | "InflationReceived"
      | "RewardClaimed"
      | "RewardClaimsEnabled"
      | "RewardClaimsExpired"
      | "RewardsBurned"
      | "RewardsDistributed"
      | "TimelockedGovernanceCallCanceled"
      | "TimelockedGovernanceCallExecuted"
      | "UnearnedRewardsAccrued"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "accrueUnearnedRewards",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "activate", values?: undefined): string;
  encodeFunctionData(functionFragment: "active", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "autoClaim",
    values: [AddressLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelGovernanceCall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [AddressLike, AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFromDataProviders",
    values: [AddressLike, AddressLike, BigNumberish[], AddressLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewardFromDataProviders",
    values: [AddressLike, BigNumberish[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimSetupManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closeExpiredRewardEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributeRewards",
    values: [
      AddressLike[],
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "enableClaims",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeGovernanceCall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feePercentageUpdateOffset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "firstClaimableRewardEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ftsoManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressUpdater",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimedReward",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRewardEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDataProviderCurrentFeePercentage",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDataProviderFeePercentage",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDataProviderPerformanceInfo",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDataProviderScheduledFeePercentageChanges",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochsWithClaimableRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochsWithUnclaimedRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getInflationAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInitialRewardEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardEpochToExpireNext",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardEpochVotePowerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStateOfRewards",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStateOfRewardsFromDataProviders",
    values: [AddressLike, BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPoolSupplyData",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getTotals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUnclaimedReward",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceSettings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialise",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "newFtsoRewardManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextClaimableRewardEpoch",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "oldFtsoRewardManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "productionMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveInflation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDailyAuthorizedInflation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDataProviderFeePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInitialRewardData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setNewFtsoRewardManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "switchToProductionMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timelockedCalls",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateContractAddresses",
    values: [BytesLike[], AddressLike[]]
  ): string;
  encodeFunctionData(functionFragment: "wNat", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "accrueUnearnedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "activate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "active", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "autoClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelGovernanceCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimFromDataProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewardFromDataProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimSetupManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeExpiredRewardEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deactivate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeGovernanceCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feePercentageUpdateOffset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstClaimableRewardEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ftsoManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddressUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimedReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRewardEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataProviderCurrentFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataProviderFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataProviderPerformanceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataProviderScheduledFeePercentageChanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochsWithClaimableRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochsWithUnclaimedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInflationAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitialRewardEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardEpochToExpireNext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardEpochVotePowerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStateOfRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStateOfRewardsFromDataProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPoolSupplyData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTotals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUnclaimedReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "governanceSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialise", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newFtsoRewardManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextClaimableRewardEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oldFtsoRewardManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "productionMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveInflation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDailyAuthorizedInflation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDataProviderFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInitialRewardData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNewFtsoRewardManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "switchToProductionMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timelockedCalls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateContractAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wNat", data: BytesLike): Result;
}

export namespace DailyAuthorizedInflationSetEvent {
  export type InputTuple = [authorizedAmountWei: BigNumberish];
  export type OutputTuple = [authorizedAmountWei: bigint];
  export interface OutputObject {
    authorizedAmountWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeePercentageChangedEvent {
  export type InputTuple = [
    dataProvider: AddressLike,
    value: BigNumberish,
    validFromEpoch: BigNumberish
  ];
  export type OutputTuple = [
    dataProvider: string,
    value: bigint,
    validFromEpoch: bigint
  ];
  export interface OutputObject {
    dataProvider: string;
    value: bigint;
    validFromEpoch: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FtsoRewardManagerActivatedEvent {
  export type InputTuple = [ftsoRewardManager: AddressLike];
  export type OutputTuple = [ftsoRewardManager: string];
  export interface OutputObject {
    ftsoRewardManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FtsoRewardManagerDeactivatedEvent {
  export type InputTuple = [ftsoRewardManager: AddressLike];
  export type OutputTuple = [ftsoRewardManager: string];
  export interface OutputObject {
    ftsoRewardManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernanceCallTimelockedEvent {
  export type InputTuple = [
    selector: BytesLike,
    allowedAfterTimestamp: BigNumberish,
    encodedCall: BytesLike
  ];
  export type OutputTuple = [
    selector: string,
    allowedAfterTimestamp: bigint,
    encodedCall: string
  ];
  export interface OutputObject {
    selector: string;
    allowedAfterTimestamp: bigint;
    encodedCall: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernanceInitialisedEvent {
  export type InputTuple = [initialGovernance: AddressLike];
  export type OutputTuple = [initialGovernance: string];
  export interface OutputObject {
    initialGovernance: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernedProductionModeEnteredEvent {
  export type InputTuple = [governanceSettings: AddressLike];
  export type OutputTuple = [governanceSettings: string];
  export interface OutputObject {
    governanceSettings: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InflationReceivedEvent {
  export type InputTuple = [amountReceivedWei: BigNumberish];
  export type OutputTuple = [amountReceivedWei: bigint];
  export interface OutputObject {
    amountReceivedWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimedEvent {
  export type InputTuple = [
    dataProvider: AddressLike,
    whoClaimed: AddressLike,
    sentTo: AddressLike,
    rewardEpoch: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    dataProvider: string,
    whoClaimed: string,
    sentTo: string,
    rewardEpoch: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    dataProvider: string;
    whoClaimed: string;
    sentTo: string;
    rewardEpoch: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimsEnabledEvent {
  export type InputTuple = [rewardEpochId: BigNumberish];
  export type OutputTuple = [rewardEpochId: bigint];
  export interface OutputObject {
    rewardEpochId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimsExpiredEvent {
  export type InputTuple = [rewardEpochId: BigNumberish];
  export type OutputTuple = [rewardEpochId: bigint];
  export interface OutputObject {
    rewardEpochId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsBurnedEvent {
  export type InputTuple = [amountBurnedWei: BigNumberish];
  export type OutputTuple = [amountBurnedWei: bigint];
  export interface OutputObject {
    amountBurnedWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsDistributedEvent {
  export type InputTuple = [
    ftso: AddressLike,
    epochId: BigNumberish,
    addresses: AddressLike[],
    rewards: BigNumberish[]
  ];
  export type OutputTuple = [
    ftso: string,
    epochId: bigint,
    addresses: string[],
    rewards: bigint[]
  ];
  export interface OutputObject {
    ftso: string;
    epochId: bigint;
    addresses: string[];
    rewards: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimelockedGovernanceCallCanceledEvent {
  export type InputTuple = [selector: BytesLike, timestamp: BigNumberish];
  export type OutputTuple = [selector: string, timestamp: bigint];
  export interface OutputObject {
    selector: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimelockedGovernanceCallExecutedEvent {
  export type InputTuple = [selector: BytesLike, timestamp: BigNumberish];
  export type OutputTuple = [selector: string, timestamp: bigint];
  export interface OutputObject {
    selector: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnearnedRewardsAccruedEvent {
  export type InputTuple = [epochId: BigNumberish, reward: BigNumberish];
  export type OutputTuple = [epochId: bigint, reward: bigint];
  export interface OutputObject {
    epochId: bigint;
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FtsoRewardManager extends BaseContract {
  connect(runner?: ContractRunner | null): FtsoRewardManager;
  waitForDeployment(): Promise<this>;

  interface: FtsoRewardManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accrueUnearnedRewards: TypedContractMethod<
    [
      _epochId: BigNumberish,
      _priceEpochDurationSeconds: BigNumberish,
      _priceEpochEndTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  activate: TypedContractMethod<[], [void], "nonpayable">;

  active: TypedContractMethod<[], [boolean], "view">;

  autoClaim: TypedContractMethod<
    [_rewardOwners: AddressLike[], _rewardEpoch: BigNumberish],
    [void],
    "nonpayable"
  >;

  cancelGovernanceCall: TypedContractMethod<
    [_selector: BytesLike],
    [void],
    "nonpayable"
  >;

  claim: TypedContractMethod<
    [
      _rewardOwner: AddressLike,
      _recipient: AddressLike,
      _rewardEpoch: BigNumberish,
      _wrap: boolean
    ],
    [bigint],
    "nonpayable"
  >;

  claimFromDataProviders: TypedContractMethod<
    [
      _rewardOwner: AddressLike,
      _recipient: AddressLike,
      _rewardEpochs: BigNumberish[],
      _dataProviders: AddressLike[],
      _wrap: boolean
    ],
    [bigint],
    "nonpayable"
  >;

  claimReward: TypedContractMethod<
    [_recipient: AddressLike, _rewardEpochs: BigNumberish[]],
    [bigint],
    "nonpayable"
  >;

  claimRewardFromDataProviders: TypedContractMethod<
    [
      _recipient: AddressLike,
      _rewardEpochs: BigNumberish[],
      _dataProviders: AddressLike[]
    ],
    [bigint],
    "nonpayable"
  >;

  claimSetupManager: TypedContractMethod<[], [string], "view">;

  closeExpiredRewardEpoch: TypedContractMethod<
    [_rewardEpoch: BigNumberish],
    [void],
    "nonpayable"
  >;

  deactivate: TypedContractMethod<[], [void], "nonpayable">;

  defaultFeePercentage: TypedContractMethod<[], [bigint], "view">;

  distributeRewards: TypedContractMethod<
    [
      _addresses: AddressLike[],
      _weights: BigNumberish[],
      _totalWeight: BigNumberish,
      _epochId: BigNumberish,
      _ftso: AddressLike,
      _priceEpochDurationSeconds: BigNumberish,
      _currentRewardEpoch: BigNumberish,
      _priceEpochEndTime: BigNumberish,
      _votePowerBlock: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  enableClaims: TypedContractMethod<[], [void], "nonpayable">;

  executeGovernanceCall: TypedContractMethod<
    [_selector: BytesLike],
    [void],
    "nonpayable"
  >;

  feePercentageUpdateOffset: TypedContractMethod<[], [bigint], "view">;

  firstClaimableRewardEpoch: TypedContractMethod<[], [bigint], "view">;

  ftsoManager: TypedContractMethod<[], [string], "view">;

  getAddressUpdater: TypedContractMethod<[], [string], "view">;

  getClaimedReward: TypedContractMethod<
    [
      _rewardEpoch: BigNumberish,
      _dataProvider: AddressLike,
      _claimer: AddressLike
    ],
    [[boolean, bigint] & { _claimed: boolean; _amount: bigint }],
    "view"
  >;

  getContractName: TypedContractMethod<[], [string], "view">;

  getCurrentRewardEpoch: TypedContractMethod<[], [bigint], "view">;

  getDataProviderCurrentFeePercentage: TypedContractMethod<
    [_dataProvider: AddressLike],
    [bigint],
    "view"
  >;

  getDataProviderFeePercentage: TypedContractMethod<
    [_dataProvider: AddressLike, _rewardEpoch: BigNumberish],
    [bigint],
    "view"
  >;

  getDataProviderPerformanceInfo: TypedContractMethod<
    [_rewardEpoch: BigNumberish, _dataProvider: AddressLike],
    [
      [bigint, bigint] & {
        _rewardAmount: bigint;
        _votePowerIgnoringRevocation: bigint;
      }
    ],
    "view"
  >;

  getDataProviderScheduledFeePercentageChanges: TypedContractMethod<
    [_dataProvider: AddressLike],
    [
      [bigint[], bigint[], boolean[]] & {
        _feePercentageBIPS: bigint[];
        _validFromEpoch: bigint[];
        _fixed: boolean[];
      }
    ],
    "view"
  >;

  getEpochReward: TypedContractMethod<
    [_rewardEpoch: BigNumberish],
    [[bigint, bigint] & { _totalReward: bigint; _claimedReward: bigint }],
    "view"
  >;

  getEpochsWithClaimableRewards: TypedContractMethod<
    [],
    [[bigint, bigint] & { _startEpochId: bigint; _endEpochId: bigint }],
    "view"
  >;

  getEpochsWithUnclaimedRewards: TypedContractMethod<
    [_beneficiary: AddressLike],
    [bigint[]],
    "view"
  >;

  getInflationAddress: TypedContractMethod<[], [string], "view">;

  getInitialRewardEpoch: TypedContractMethod<[], [bigint], "view">;

  getRewardEpochToExpireNext: TypedContractMethod<[], [bigint], "view">;

  getRewardEpochVotePowerBlock: TypedContractMethod<
    [_rewardEpoch: BigNumberish],
    [bigint],
    "view"
  >;

  getStateOfRewards: TypedContractMethod<
    [_beneficiary: AddressLike, _rewardEpoch: BigNumberish],
    [
      [string[], bigint[], boolean[], boolean] & {
        _dataProviders: string[];
        _rewardAmounts: bigint[];
        _claimed: boolean[];
        _claimable: boolean;
      }
    ],
    "view"
  >;

  getStateOfRewardsFromDataProviders: TypedContractMethod<
    [
      _beneficiary: AddressLike,
      _rewardEpoch: BigNumberish,
      _dataProviders: AddressLike[]
    ],
    [
      [bigint[], boolean[], boolean] & {
        _rewardAmounts: bigint[];
        _claimed: boolean[];
        _claimable: boolean;
      }
    ],
    "view"
  >;

  getTokenPoolSupplyData: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        _lockedFundsWei: bigint;
        _totalInflationAuthorizedWei: bigint;
        _totalClaimedWei: bigint;
      }
    ],
    "view"
  >;

  getTotals: TypedContractMethod<
    [],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        _totalAwardedWei: bigint;
        _totalClaimedWei: bigint;
        _totalExpiredWei: bigint;
        _totalUnearnedWei: bigint;
        _totalBurnedWei: bigint;
        _totalInflationAuthorizedWei: bigint;
        _totalInflationReceivedWei: bigint;
        _lastInflationAuthorizationReceivedTs: bigint;
        _dailyAuthorizedInflation: bigint;
      }
    ],
    "view"
  >;

  getUnclaimedReward: TypedContractMethod<
    [_rewardEpoch: BigNumberish, _dataProvider: AddressLike],
    [[bigint, bigint] & { _amount: bigint; _weight: bigint }],
    "view"
  >;

  governance: TypedContractMethod<[], [string], "view">;

  governanceSettings: TypedContractMethod<[], [string], "view">;

  initialise: TypedContractMethod<
    [_initialGovernance: AddressLike],
    [void],
    "nonpayable"
  >;

  newFtsoRewardManager: TypedContractMethod<[], [string], "view">;

  nextClaimableRewardEpoch: TypedContractMethod<
    [_rewardOwner: AddressLike],
    [bigint],
    "view"
  >;

  oldFtsoRewardManager: TypedContractMethod<[], [string], "view">;

  productionMode: TypedContractMethod<[], [boolean], "view">;

  receiveInflation: TypedContractMethod<[], [void], "payable">;

  setDailyAuthorizedInflation: TypedContractMethod<
    [_toAuthorizeWei: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDataProviderFeePercentage: TypedContractMethod<
    [_feePercentageBIPS: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  setInitialRewardData: TypedContractMethod<[], [void], "nonpayable">;

  setNewFtsoRewardManager: TypedContractMethod<
    [_newFtsoRewardManager: AddressLike],
    [void],
    "nonpayable"
  >;

  switchToProductionMode: TypedContractMethod<[], [void], "nonpayable">;

  timelockedCalls: TypedContractMethod<
    [arg0: BytesLike],
    [[bigint, string] & { allowedAfterTimestamp: bigint; encodedCall: string }],
    "view"
  >;

  updateContractAddresses: TypedContractMethod<
    [_contractNameHashes: BytesLike[], _contractAddresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  wNat: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accrueUnearnedRewards"
  ): TypedContractMethod<
    [
      _epochId: BigNumberish,
      _priceEpochDurationSeconds: BigNumberish,
      _priceEpochEndTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "activate"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "active"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "autoClaim"
  ): TypedContractMethod<
    [_rewardOwners: AddressLike[], _rewardEpoch: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelGovernanceCall"
  ): TypedContractMethod<[_selector: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [
      _rewardOwner: AddressLike,
      _recipient: AddressLike,
      _rewardEpoch: BigNumberish,
      _wrap: boolean
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimFromDataProviders"
  ): TypedContractMethod<
    [
      _rewardOwner: AddressLike,
      _recipient: AddressLike,
      _rewardEpochs: BigNumberish[],
      _dataProviders: AddressLike[],
      _wrap: boolean
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimReward"
  ): TypedContractMethod<
    [_recipient: AddressLike, _rewardEpochs: BigNumberish[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimRewardFromDataProviders"
  ): TypedContractMethod<
    [
      _recipient: AddressLike,
      _rewardEpochs: BigNumberish[],
      _dataProviders: AddressLike[]
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimSetupManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "closeExpiredRewardEpoch"
  ): TypedContractMethod<[_rewardEpoch: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deactivate"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "defaultFeePercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "distributeRewards"
  ): TypedContractMethod<
    [
      _addresses: AddressLike[],
      _weights: BigNumberish[],
      _totalWeight: BigNumberish,
      _epochId: BigNumberish,
      _ftso: AddressLike,
      _priceEpochDurationSeconds: BigNumberish,
      _currentRewardEpoch: BigNumberish,
      _priceEpochEndTime: BigNumberish,
      _votePowerBlock: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "enableClaims"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeGovernanceCall"
  ): TypedContractMethod<[_selector: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "feePercentageUpdateOffset"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "firstClaimableRewardEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ftsoManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAddressUpdater"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getClaimedReward"
  ): TypedContractMethod<
    [
      _rewardEpoch: BigNumberish,
      _dataProvider: AddressLike,
      _claimer: AddressLike
    ],
    [[boolean, bigint] & { _claimed: boolean; _amount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContractName"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCurrentRewardEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDataProviderCurrentFeePercentage"
  ): TypedContractMethod<[_dataProvider: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDataProviderFeePercentage"
  ): TypedContractMethod<
    [_dataProvider: AddressLike, _rewardEpoch: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDataProviderPerformanceInfo"
  ): TypedContractMethod<
    [_rewardEpoch: BigNumberish, _dataProvider: AddressLike],
    [
      [bigint, bigint] & {
        _rewardAmount: bigint;
        _votePowerIgnoringRevocation: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDataProviderScheduledFeePercentageChanges"
  ): TypedContractMethod<
    [_dataProvider: AddressLike],
    [
      [bigint[], bigint[], boolean[]] & {
        _feePercentageBIPS: bigint[];
        _validFromEpoch: bigint[];
        _fixed: boolean[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEpochReward"
  ): TypedContractMethod<
    [_rewardEpoch: BigNumberish],
    [[bigint, bigint] & { _totalReward: bigint; _claimedReward: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEpochsWithClaimableRewards"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { _startEpochId: bigint; _endEpochId: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEpochsWithUnclaimedRewards"
  ): TypedContractMethod<[_beneficiary: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getInflationAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getInitialRewardEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRewardEpochToExpireNext"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRewardEpochVotePowerBlock"
  ): TypedContractMethod<[_rewardEpoch: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStateOfRewards"
  ): TypedContractMethod<
    [_beneficiary: AddressLike, _rewardEpoch: BigNumberish],
    [
      [string[], bigint[], boolean[], boolean] & {
        _dataProviders: string[];
        _rewardAmounts: bigint[];
        _claimed: boolean[];
        _claimable: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStateOfRewardsFromDataProviders"
  ): TypedContractMethod<
    [
      _beneficiary: AddressLike,
      _rewardEpoch: BigNumberish,
      _dataProviders: AddressLike[]
    ],
    [
      [bigint[], boolean[], boolean] & {
        _rewardAmounts: bigint[];
        _claimed: boolean[];
        _claimable: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenPoolSupplyData"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        _lockedFundsWei: bigint;
        _totalInflationAuthorizedWei: bigint;
        _totalClaimedWei: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotals"
  ): TypedContractMethod<
    [],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        _totalAwardedWei: bigint;
        _totalClaimedWei: bigint;
        _totalExpiredWei: bigint;
        _totalUnearnedWei: bigint;
        _totalBurnedWei: bigint;
        _totalInflationAuthorizedWei: bigint;
        _totalInflationReceivedWei: bigint;
        _lastInflationAuthorizationReceivedTs: bigint;
        _dailyAuthorizedInflation: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUnclaimedReward"
  ): TypedContractMethod<
    [_rewardEpoch: BigNumberish, _dataProvider: AddressLike],
    [[bigint, bigint] & { _amount: bigint; _weight: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "governance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "governanceSettings"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialise"
  ): TypedContractMethod<
    [_initialGovernance: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "newFtsoRewardManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nextClaimableRewardEpoch"
  ): TypedContractMethod<[_rewardOwner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "oldFtsoRewardManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "productionMode"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "receiveInflation"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "setDailyAuthorizedInflation"
  ): TypedContractMethod<[_toAuthorizeWei: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDataProviderFeePercentage"
  ): TypedContractMethod<
    [_feePercentageBIPS: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setInitialRewardData"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setNewFtsoRewardManager"
  ): TypedContractMethod<
    [_newFtsoRewardManager: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "switchToProductionMode"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "timelockedCalls"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[bigint, string] & { allowedAfterTimestamp: bigint; encodedCall: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateContractAddresses"
  ): TypedContractMethod<
    [_contractNameHashes: BytesLike[], _contractAddresses: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "wNat"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "DailyAuthorizedInflationSet"
  ): TypedContractEvent<
    DailyAuthorizedInflationSetEvent.InputTuple,
    DailyAuthorizedInflationSetEvent.OutputTuple,
    DailyAuthorizedInflationSetEvent.OutputObject
  >;
  getEvent(
    key: "FeePercentageChanged"
  ): TypedContractEvent<
    FeePercentageChangedEvent.InputTuple,
    FeePercentageChangedEvent.OutputTuple,
    FeePercentageChangedEvent.OutputObject
  >;
  getEvent(
    key: "FtsoRewardManagerActivated"
  ): TypedContractEvent<
    FtsoRewardManagerActivatedEvent.InputTuple,
    FtsoRewardManagerActivatedEvent.OutputTuple,
    FtsoRewardManagerActivatedEvent.OutputObject
  >;
  getEvent(
    key: "FtsoRewardManagerDeactivated"
  ): TypedContractEvent<
    FtsoRewardManagerDeactivatedEvent.InputTuple,
    FtsoRewardManagerDeactivatedEvent.OutputTuple,
    FtsoRewardManagerDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "GovernanceCallTimelocked"
  ): TypedContractEvent<
    GovernanceCallTimelockedEvent.InputTuple,
    GovernanceCallTimelockedEvent.OutputTuple,
    GovernanceCallTimelockedEvent.OutputObject
  >;
  getEvent(
    key: "GovernanceInitialised"
  ): TypedContractEvent<
    GovernanceInitialisedEvent.InputTuple,
    GovernanceInitialisedEvent.OutputTuple,
    GovernanceInitialisedEvent.OutputObject
  >;
  getEvent(
    key: "GovernedProductionModeEntered"
  ): TypedContractEvent<
    GovernedProductionModeEnteredEvent.InputTuple,
    GovernedProductionModeEnteredEvent.OutputTuple,
    GovernedProductionModeEnteredEvent.OutputObject
  >;
  getEvent(
    key: "InflationReceived"
  ): TypedContractEvent<
    InflationReceivedEvent.InputTuple,
    InflationReceivedEvent.OutputTuple,
    InflationReceivedEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimed"
  ): TypedContractEvent<
    RewardClaimedEvent.InputTuple,
    RewardClaimedEvent.OutputTuple,
    RewardClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimsEnabled"
  ): TypedContractEvent<
    RewardClaimsEnabledEvent.InputTuple,
    RewardClaimsEnabledEvent.OutputTuple,
    RewardClaimsEnabledEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimsExpired"
  ): TypedContractEvent<
    RewardClaimsExpiredEvent.InputTuple,
    RewardClaimsExpiredEvent.OutputTuple,
    RewardClaimsExpiredEvent.OutputObject
  >;
  getEvent(
    key: "RewardsBurned"
  ): TypedContractEvent<
    RewardsBurnedEvent.InputTuple,
    RewardsBurnedEvent.OutputTuple,
    RewardsBurnedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsDistributed"
  ): TypedContractEvent<
    RewardsDistributedEvent.InputTuple,
    RewardsDistributedEvent.OutputTuple,
    RewardsDistributedEvent.OutputObject
  >;
  getEvent(
    key: "TimelockedGovernanceCallCanceled"
  ): TypedContractEvent<
    TimelockedGovernanceCallCanceledEvent.InputTuple,
    TimelockedGovernanceCallCanceledEvent.OutputTuple,
    TimelockedGovernanceCallCanceledEvent.OutputObject
  >;
  getEvent(
    key: "TimelockedGovernanceCallExecuted"
  ): TypedContractEvent<
    TimelockedGovernanceCallExecutedEvent.InputTuple,
    TimelockedGovernanceCallExecutedEvent.OutputTuple,
    TimelockedGovernanceCallExecutedEvent.OutputObject
  >;
  getEvent(
    key: "UnearnedRewardsAccrued"
  ): TypedContractEvent<
    UnearnedRewardsAccruedEvent.InputTuple,
    UnearnedRewardsAccruedEvent.OutputTuple,
    UnearnedRewardsAccruedEvent.OutputObject
  >;

  filters: {
    "DailyAuthorizedInflationSet(uint256)": TypedContractEvent<
      DailyAuthorizedInflationSetEvent.InputTuple,
      DailyAuthorizedInflationSetEvent.OutputTuple,
      DailyAuthorizedInflationSetEvent.OutputObject
    >;
    DailyAuthorizedInflationSet: TypedContractEvent<
      DailyAuthorizedInflationSetEvent.InputTuple,
      DailyAuthorizedInflationSetEvent.OutputTuple,
      DailyAuthorizedInflationSetEvent.OutputObject
    >;

    "FeePercentageChanged(address,uint256,uint256)": TypedContractEvent<
      FeePercentageChangedEvent.InputTuple,
      FeePercentageChangedEvent.OutputTuple,
      FeePercentageChangedEvent.OutputObject
    >;
    FeePercentageChanged: TypedContractEvent<
      FeePercentageChangedEvent.InputTuple,
      FeePercentageChangedEvent.OutputTuple,
      FeePercentageChangedEvent.OutputObject
    >;

    "FtsoRewardManagerActivated(address)": TypedContractEvent<
      FtsoRewardManagerActivatedEvent.InputTuple,
      FtsoRewardManagerActivatedEvent.OutputTuple,
      FtsoRewardManagerActivatedEvent.OutputObject
    >;
    FtsoRewardManagerActivated: TypedContractEvent<
      FtsoRewardManagerActivatedEvent.InputTuple,
      FtsoRewardManagerActivatedEvent.OutputTuple,
      FtsoRewardManagerActivatedEvent.OutputObject
    >;

    "FtsoRewardManagerDeactivated(address)": TypedContractEvent<
      FtsoRewardManagerDeactivatedEvent.InputTuple,
      FtsoRewardManagerDeactivatedEvent.OutputTuple,
      FtsoRewardManagerDeactivatedEvent.OutputObject
    >;
    FtsoRewardManagerDeactivated: TypedContractEvent<
      FtsoRewardManagerDeactivatedEvent.InputTuple,
      FtsoRewardManagerDeactivatedEvent.OutputTuple,
      FtsoRewardManagerDeactivatedEvent.OutputObject
    >;

    "GovernanceCallTimelocked(bytes4,uint256,bytes)": TypedContractEvent<
      GovernanceCallTimelockedEvent.InputTuple,
      GovernanceCallTimelockedEvent.OutputTuple,
      GovernanceCallTimelockedEvent.OutputObject
    >;
    GovernanceCallTimelocked: TypedContractEvent<
      GovernanceCallTimelockedEvent.InputTuple,
      GovernanceCallTimelockedEvent.OutputTuple,
      GovernanceCallTimelockedEvent.OutputObject
    >;

    "GovernanceInitialised(address)": TypedContractEvent<
      GovernanceInitialisedEvent.InputTuple,
      GovernanceInitialisedEvent.OutputTuple,
      GovernanceInitialisedEvent.OutputObject
    >;
    GovernanceInitialised: TypedContractEvent<
      GovernanceInitialisedEvent.InputTuple,
      GovernanceInitialisedEvent.OutputTuple,
      GovernanceInitialisedEvent.OutputObject
    >;

    "GovernedProductionModeEntered(address)": TypedContractEvent<
      GovernedProductionModeEnteredEvent.InputTuple,
      GovernedProductionModeEnteredEvent.OutputTuple,
      GovernedProductionModeEnteredEvent.OutputObject
    >;
    GovernedProductionModeEntered: TypedContractEvent<
      GovernedProductionModeEnteredEvent.InputTuple,
      GovernedProductionModeEnteredEvent.OutputTuple,
      GovernedProductionModeEnteredEvent.OutputObject
    >;

    "InflationReceived(uint256)": TypedContractEvent<
      InflationReceivedEvent.InputTuple,
      InflationReceivedEvent.OutputTuple,
      InflationReceivedEvent.OutputObject
    >;
    InflationReceived: TypedContractEvent<
      InflationReceivedEvent.InputTuple,
      InflationReceivedEvent.OutputTuple,
      InflationReceivedEvent.OutputObject
    >;

    "RewardClaimed(address,address,address,uint256,uint256)": TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
    RewardClaimed: TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;

    "RewardClaimsEnabled(uint256)": TypedContractEvent<
      RewardClaimsEnabledEvent.InputTuple,
      RewardClaimsEnabledEvent.OutputTuple,
      RewardClaimsEnabledEvent.OutputObject
    >;
    RewardClaimsEnabled: TypedContractEvent<
      RewardClaimsEnabledEvent.InputTuple,
      RewardClaimsEnabledEvent.OutputTuple,
      RewardClaimsEnabledEvent.OutputObject
    >;

    "RewardClaimsExpired(uint256)": TypedContractEvent<
      RewardClaimsExpiredEvent.InputTuple,
      RewardClaimsExpiredEvent.OutputTuple,
      RewardClaimsExpiredEvent.OutputObject
    >;
    RewardClaimsExpired: TypedContractEvent<
      RewardClaimsExpiredEvent.InputTuple,
      RewardClaimsExpiredEvent.OutputTuple,
      RewardClaimsExpiredEvent.OutputObject
    >;

    "RewardsBurned(uint256)": TypedContractEvent<
      RewardsBurnedEvent.InputTuple,
      RewardsBurnedEvent.OutputTuple,
      RewardsBurnedEvent.OutputObject
    >;
    RewardsBurned: TypedContractEvent<
      RewardsBurnedEvent.InputTuple,
      RewardsBurnedEvent.OutputTuple,
      RewardsBurnedEvent.OutputObject
    >;

    "RewardsDistributed(address,uint256,address[],uint256[])": TypedContractEvent<
      RewardsDistributedEvent.InputTuple,
      RewardsDistributedEvent.OutputTuple,
      RewardsDistributedEvent.OutputObject
    >;
    RewardsDistributed: TypedContractEvent<
      RewardsDistributedEvent.InputTuple,
      RewardsDistributedEvent.OutputTuple,
      RewardsDistributedEvent.OutputObject
    >;

    "TimelockedGovernanceCallCanceled(bytes4,uint256)": TypedContractEvent<
      TimelockedGovernanceCallCanceledEvent.InputTuple,
      TimelockedGovernanceCallCanceledEvent.OutputTuple,
      TimelockedGovernanceCallCanceledEvent.OutputObject
    >;
    TimelockedGovernanceCallCanceled: TypedContractEvent<
      TimelockedGovernanceCallCanceledEvent.InputTuple,
      TimelockedGovernanceCallCanceledEvent.OutputTuple,
      TimelockedGovernanceCallCanceledEvent.OutputObject
    >;

    "TimelockedGovernanceCallExecuted(bytes4,uint256)": TypedContractEvent<
      TimelockedGovernanceCallExecutedEvent.InputTuple,
      TimelockedGovernanceCallExecutedEvent.OutputTuple,
      TimelockedGovernanceCallExecutedEvent.OutputObject
    >;
    TimelockedGovernanceCallExecuted: TypedContractEvent<
      TimelockedGovernanceCallExecutedEvent.InputTuple,
      TimelockedGovernanceCallExecutedEvent.OutputTuple,
      TimelockedGovernanceCallExecutedEvent.OutputObject
    >;

    "UnearnedRewardsAccrued(uint256,uint256)": TypedContractEvent<
      UnearnedRewardsAccruedEvent.InputTuple,
      UnearnedRewardsAccruedEvent.OutputTuple,
      UnearnedRewardsAccruedEvent.OutputObject
    >;
    UnearnedRewardsAccrued: TypedContractEvent<
      UnearnedRewardsAccruedEvent.InputTuple,
      UnearnedRewardsAccruedEvent.OutputTuple,
      UnearnedRewardsAccruedEvent.OutputObject
    >;
  };
}
