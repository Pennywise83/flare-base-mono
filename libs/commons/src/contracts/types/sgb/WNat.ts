/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface WNatInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowance"
      | "approve"
      | "balanceHistoryCleanup"
      | "balanceOf"
      | "balanceOfAt"
      | "batchVotePowerOfAt"
      | "claimGovernance"
      | "cleanupBlockNumber"
      | "decimals"
      | "decreaseAllowance"
      | "delegate"
      | "delegateExplicit"
      | "delegatesOf"
      | "delegatesOfAt"
      | "delegationModeOf"
      | "deposit"
      | "depositTo"
      | "governance"
      | "governanceVotePower"
      | "increaseAllowance"
      | "initialise"
      | "name"
      | "needsReplacementVPContract"
      | "proposeGovernance"
      | "proposedGovernance"
      | "readVotePowerContract"
      | "revokeDelegationAt"
      | "setCleanerContract"
      | "setCleanupBlockNumber"
      | "setCleanupBlockNumberManager"
      | "setGovernanceVotePower"
      | "setReadVpContract"
      | "setWriteVpContract"
      | "symbol"
      | "totalSupply"
      | "totalSupplyAt"
      | "totalSupplyCacheCleanup"
      | "totalSupplyHistoryCleanup"
      | "totalVotePower"
      | "totalVotePowerAt"
      | "totalVotePowerAtCached"
      | "transfer"
      | "transferFrom"
      | "transferGovernance"
      | "undelegateAll"
      | "undelegateAllExplicit"
      | "undelegatedVotePowerOf"
      | "undelegatedVotePowerOfAt"
      | "votePowerFromTo"
      | "votePowerFromToAt"
      | "votePowerOf"
      | "votePowerOfAt"
      | "votePowerOfAtCached"
      | "withdraw"
      | "withdrawFrom"
      | "writeVotePowerContract"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "CreatedTotalSupplyCache"
      | "Deposit"
      | "GovernanceProposed"
      | "GovernanceUpdated"
      | "Transfer"
      | "VotePowerContractChanged"
      | "Withdrawal"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceHistoryCleanup",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfAt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchVotePowerOfAt",
    values: [AddressLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cleanupBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateExplicit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatesOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatesOfAt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegationModeOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceVotePower",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialise",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "needsReplacementVPContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposeGovernance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposedGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "readVotePowerContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeDelegationAt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCleanerContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCleanupBlockNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCleanupBlockNumberManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernanceVotePower",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setReadVpContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWriteVpContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyCacheCleanup",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyHistoryCleanup",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalVotePower",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVotePowerAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalVotePowerAtCached",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferGovernance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "undelegateAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "undelegateAllExplicit",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "undelegatedVotePowerOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "undelegatedVotePowerOfAt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votePowerFromTo",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "votePowerFromToAt",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votePowerOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "votePowerOfAt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votePowerOfAtCached",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFrom",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "writeVotePowerContract",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceHistoryCleanup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchVotePowerOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cleanupBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateExplicit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatesOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatesOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegationModeOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "governanceVotePower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialise", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "needsReplacementVPContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readVotePowerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeDelegationAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCleanerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCleanupBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCleanupBlockNumberManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernanceVotePower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReadVpContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWriteVpContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyCacheCleanup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyHistoryCleanup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVotePower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVotePowerAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVotePowerAtCached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "undelegateAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "undelegateAllExplicit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "undelegatedVotePowerOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "undelegatedVotePowerOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePowerFromTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePowerFromToAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePowerOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePowerOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePowerOfAtCached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "writeVotePowerContract",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreatedTotalSupplyCacheEvent {
  export type InputTuple = [_blockNumber: BigNumberish];
  export type OutputTuple = [_blockNumber: bigint];
  export interface OutputObject {
    _blockNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [dst: AddressLike, amount: BigNumberish];
  export type OutputTuple = [dst: string, amount: bigint];
  export interface OutputObject {
    dst: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernanceProposedEvent {
  export type InputTuple = [proposedGovernance: AddressLike];
  export type OutputTuple = [proposedGovernance: string];
  export interface OutputObject {
    proposedGovernance: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernanceUpdatedEvent {
  export type InputTuple = [
    oldGovernance: AddressLike,
    newGoveranance: AddressLike
  ];
  export type OutputTuple = [oldGovernance: string, newGoveranance: string];
  export interface OutputObject {
    oldGovernance: string;
    newGoveranance: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotePowerContractChangedEvent {
  export type InputTuple = [
    _contractType: BigNumberish,
    _oldContractAddress: AddressLike,
    _newContractAddress: AddressLike
  ];
  export type OutputTuple = [
    _contractType: bigint,
    _oldContractAddress: string,
    _newContractAddress: string
  ];
  export interface OutputObject {
    _contractType: bigint;
    _oldContractAddress: string;
    _newContractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [src: AddressLike, amount: BigNumberish];
  export type OutputTuple = [src: string, amount: bigint];
  export interface OutputObject {
    src: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface WNat extends BaseContract {
  connect(runner?: ContractRunner | null): WNat;
  waitForDeployment(): Promise<this>;

  interface: WNatInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceHistoryCleanup: TypedContractMethod<
    [_owner: AddressLike, _count: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  balanceOfAt: TypedContractMethod<
    [_owner: AddressLike, _blockNumber: BigNumberish],
    [bigint],
    "view"
  >;

  batchVotePowerOfAt: TypedContractMethod<
    [_owners: AddressLike[], _blockNumber: BigNumberish],
    [bigint[]],
    "view"
  >;

  claimGovernance: TypedContractMethod<[], [void], "nonpayable">;

  cleanupBlockNumber: TypedContractMethod<[], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  delegate: TypedContractMethod<
    [_to: AddressLike, _bips: BigNumberish],
    [void],
    "nonpayable"
  >;

  delegateExplicit: TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  delegatesOf: TypedContractMethod<
    [_owner: AddressLike],
    [
      [string[], bigint[], bigint, bigint] & {
        _delegateAddresses: string[];
        _bips: bigint[];
        _count: bigint;
        _delegationMode: bigint;
      }
    ],
    "view"
  >;

  delegatesOfAt: TypedContractMethod<
    [_owner: AddressLike, _blockNumber: BigNumberish],
    [
      [string[], bigint[], bigint, bigint] & {
        _delegateAddresses: string[];
        _bips: bigint[];
        _count: bigint;
        _delegationMode: bigint;
      }
    ],
    "view"
  >;

  delegationModeOf: TypedContractMethod<[_who: AddressLike], [bigint], "view">;

  deposit: TypedContractMethod<[], [void], "payable">;

  depositTo: TypedContractMethod<[recipient: AddressLike], [void], "payable">;

  governance: TypedContractMethod<[], [string], "view">;

  governanceVotePower: TypedContractMethod<[], [string], "view">;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  initialise: TypedContractMethod<
    [_governance: AddressLike],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  needsReplacementVPContract: TypedContractMethod<[], [boolean], "view">;

  proposeGovernance: TypedContractMethod<
    [_governance: AddressLike],
    [void],
    "nonpayable"
  >;

  proposedGovernance: TypedContractMethod<[], [string], "view">;

  readVotePowerContract: TypedContractMethod<[], [string], "view">;

  revokeDelegationAt: TypedContractMethod<
    [_who: AddressLike, _blockNumber: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCleanerContract: TypedContractMethod<
    [_cleanerContract: AddressLike],
    [void],
    "nonpayable"
  >;

  setCleanupBlockNumber: TypedContractMethod<
    [_blockNumber: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCleanupBlockNumberManager: TypedContractMethod<
    [_cleanupBlockNumberManager: AddressLike],
    [void],
    "nonpayable"
  >;

  setGovernanceVotePower: TypedContractMethod<
    [_governanceVotePower: AddressLike],
    [void],
    "nonpayable"
  >;

  setReadVpContract: TypedContractMethod<
    [_vpContract: AddressLike],
    [void],
    "nonpayable"
  >;

  setWriteVpContract: TypedContractMethod<
    [_vpContract: AddressLike],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  totalSupplyAt: TypedContractMethod<
    [_blockNumber: BigNumberish],
    [bigint],
    "view"
  >;

  totalSupplyCacheCleanup: TypedContractMethod<
    [_blockNumber: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  totalSupplyHistoryCleanup: TypedContractMethod<
    [_count: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  totalVotePower: TypedContractMethod<[], [bigint], "view">;

  totalVotePowerAt: TypedContractMethod<
    [_blockNumber: BigNumberish],
    [bigint],
    "view"
  >;

  totalVotePowerAtCached: TypedContractMethod<
    [_blockNumber: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  transfer: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferGovernance: TypedContractMethod<
    [_governance: AddressLike],
    [void],
    "nonpayable"
  >;

  undelegateAll: TypedContractMethod<[], [void], "nonpayable">;

  undelegateAllExplicit: TypedContractMethod<
    [_delegateAddresses: AddressLike[]],
    [bigint],
    "nonpayable"
  >;

  undelegatedVotePowerOf: TypedContractMethod<
    [_owner: AddressLike],
    [bigint],
    "view"
  >;

  undelegatedVotePowerOfAt: TypedContractMethod<
    [_owner: AddressLike, _blockNumber: BigNumberish],
    [bigint],
    "view"
  >;

  votePowerFromTo: TypedContractMethod<
    [_from: AddressLike, _to: AddressLike],
    [bigint],
    "view"
  >;

  votePowerFromToAt: TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _blockNumber: BigNumberish],
    [bigint],
    "view"
  >;

  votePowerOf: TypedContractMethod<[_owner: AddressLike], [bigint], "view">;

  votePowerOfAt: TypedContractMethod<
    [_owner: AddressLike, _blockNumber: BigNumberish],
    [bigint],
    "view"
  >;

  votePowerOfAtCached: TypedContractMethod<
    [_owner: AddressLike, _blockNumber: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  withdrawFrom: TypedContractMethod<
    [owner: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  writeVotePowerContract: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceHistoryCleanup"
  ): TypedContractMethod<
    [_owner: AddressLike, _count: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOfAt"
  ): TypedContractMethod<
    [_owner: AddressLike, _blockNumber: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchVotePowerOfAt"
  ): TypedContractMethod<
    [_owners: AddressLike[], _blockNumber: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimGovernance"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cleanupBlockNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegate"
  ): TypedContractMethod<
    [_to: AddressLike, _bips: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegateExplicit"
  ): TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegatesOf"
  ): TypedContractMethod<
    [_owner: AddressLike],
    [
      [string[], bigint[], bigint, bigint] & {
        _delegateAddresses: string[];
        _bips: bigint[];
        _count: bigint;
        _delegationMode: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "delegatesOfAt"
  ): TypedContractMethod<
    [_owner: AddressLike, _blockNumber: BigNumberish],
    [
      [string[], bigint[], bigint, bigint] & {
        _delegateAddresses: string[];
        _bips: bigint[];
        _count: bigint;
        _delegationMode: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "delegationModeOf"
  ): TypedContractMethod<[_who: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "depositTo"
  ): TypedContractMethod<[recipient: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "governance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "governanceVotePower"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialise"
  ): TypedContractMethod<[_governance: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "needsReplacementVPContract"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "proposeGovernance"
  ): TypedContractMethod<[_governance: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "proposedGovernance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "readVotePowerContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "revokeDelegationAt"
  ): TypedContractMethod<
    [_who: AddressLike, _blockNumber: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCleanerContract"
  ): TypedContractMethod<[_cleanerContract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCleanupBlockNumber"
  ): TypedContractMethod<[_blockNumber: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCleanupBlockNumberManager"
  ): TypedContractMethod<
    [_cleanupBlockNumberManager: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGovernanceVotePower"
  ): TypedContractMethod<
    [_governanceVotePower: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReadVpContract"
  ): TypedContractMethod<[_vpContract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWriteVpContract"
  ): TypedContractMethod<[_vpContract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupplyAt"
  ): TypedContractMethod<[_blockNumber: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupplyCacheCleanup"
  ): TypedContractMethod<[_blockNumber: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "totalSupplyHistoryCleanup"
  ): TypedContractMethod<[_count: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "totalVotePower"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalVotePowerAt"
  ): TypedContractMethod<[_blockNumber: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalVotePowerAtCached"
  ): TypedContractMethod<[_blockNumber: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferGovernance"
  ): TypedContractMethod<[_governance: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "undelegateAll"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "undelegateAllExplicit"
  ): TypedContractMethod<
    [_delegateAddresses: AddressLike[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "undelegatedVotePowerOf"
  ): TypedContractMethod<[_owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "undelegatedVotePowerOfAt"
  ): TypedContractMethod<
    [_owner: AddressLike, _blockNumber: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "votePowerFromTo"
  ): TypedContractMethod<
    [_from: AddressLike, _to: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "votePowerFromToAt"
  ): TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _blockNumber: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "votePowerOf"
  ): TypedContractMethod<[_owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "votePowerOfAt"
  ): TypedContractMethod<
    [_owner: AddressLike, _blockNumber: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "votePowerOfAtCached"
  ): TypedContractMethod<
    [_owner: AddressLike, _blockNumber: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawFrom"
  ): TypedContractMethod<
    [owner: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "writeVotePowerContract"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "CreatedTotalSupplyCache"
  ): TypedContractEvent<
    CreatedTotalSupplyCacheEvent.InputTuple,
    CreatedTotalSupplyCacheEvent.OutputTuple,
    CreatedTotalSupplyCacheEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "GovernanceProposed"
  ): TypedContractEvent<
    GovernanceProposedEvent.InputTuple,
    GovernanceProposedEvent.OutputTuple,
    GovernanceProposedEvent.OutputObject
  >;
  getEvent(
    key: "GovernanceUpdated"
  ): TypedContractEvent<
    GovernanceUpdatedEvent.InputTuple,
    GovernanceUpdatedEvent.OutputTuple,
    GovernanceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "VotePowerContractChanged"
  ): TypedContractEvent<
    VotePowerContractChangedEvent.InputTuple,
    VotePowerContractChangedEvent.OutputTuple,
    VotePowerContractChangedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "CreatedTotalSupplyCache(uint256)": TypedContractEvent<
      CreatedTotalSupplyCacheEvent.InputTuple,
      CreatedTotalSupplyCacheEvent.OutputTuple,
      CreatedTotalSupplyCacheEvent.OutputObject
    >;
    CreatedTotalSupplyCache: TypedContractEvent<
      CreatedTotalSupplyCacheEvent.InputTuple,
      CreatedTotalSupplyCacheEvent.OutputTuple,
      CreatedTotalSupplyCacheEvent.OutputObject
    >;

    "Deposit(address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "GovernanceProposed(address)": TypedContractEvent<
      GovernanceProposedEvent.InputTuple,
      GovernanceProposedEvent.OutputTuple,
      GovernanceProposedEvent.OutputObject
    >;
    GovernanceProposed: TypedContractEvent<
      GovernanceProposedEvent.InputTuple,
      GovernanceProposedEvent.OutputTuple,
      GovernanceProposedEvent.OutputObject
    >;

    "GovernanceUpdated(address,address)": TypedContractEvent<
      GovernanceUpdatedEvent.InputTuple,
      GovernanceUpdatedEvent.OutputTuple,
      GovernanceUpdatedEvent.OutputObject
    >;
    GovernanceUpdated: TypedContractEvent<
      GovernanceUpdatedEvent.InputTuple,
      GovernanceUpdatedEvent.OutputTuple,
      GovernanceUpdatedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "VotePowerContractChanged(uint256,address,address)": TypedContractEvent<
      VotePowerContractChangedEvent.InputTuple,
      VotePowerContractChangedEvent.OutputTuple,
      VotePowerContractChangedEvent.OutputObject
    >;
    VotePowerContractChanged: TypedContractEvent<
      VotePowerContractChangedEvent.InputTuple,
      VotePowerContractChangedEvent.OutputTuple,
      VotePowerContractChangedEvent.OutputObject
    >;

    "Withdrawal(address,uint256)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
  };
}
