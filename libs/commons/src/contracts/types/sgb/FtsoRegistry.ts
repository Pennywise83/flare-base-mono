/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IFtsoRegistry {
  export type PriceInfoStruct = {
    ftsoIndex: BigNumberish;
    price: BigNumberish;
    decimals: BigNumberish;
    timestamp: BigNumberish;
  };

  export type PriceInfoStructOutput = [
    ftsoIndex: bigint,
    price: bigint,
    decimals: bigint,
    timestamp: bigint
  ] & { ftsoIndex: bigint; price: bigint; decimals: bigint; timestamp: bigint };
}

export interface FtsoRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addFtso"
      | "cancelGovernanceCall"
      | "executeGovernanceCall"
      | "ftsoManager"
      | "getAddressUpdater"
      | "getAllCurrentPrices"
      | "getAllFtsos"
      | "getCurrentPrice(string)"
      | "getCurrentPrice(uint256)"
      | "getCurrentPriceWithDecimals(uint256)"
      | "getCurrentPriceWithDecimals(string)"
      | "getCurrentPricesByIndices"
      | "getCurrentPricesBySymbols"
      | "getFtso"
      | "getFtsoBySymbol"
      | "getFtsoHistory"
      | "getFtsoIndex"
      | "getFtsoSymbol"
      | "getFtsos"
      | "getSupportedFtsos"
      | "getSupportedIndices"
      | "getSupportedIndicesAndFtsos"
      | "getSupportedIndicesAndSymbols"
      | "getSupportedIndicesSymbolsAndFtsos"
      | "getSupportedSymbols"
      | "getSupportedSymbolsAndFtsos"
      | "governance"
      | "governanceSettings"
      | "initialise"
      | "initialiseRegistry"
      | "productionMode"
      | "removeFtso"
      | "switchToProductionMode"
      | "timelockedCalls"
      | "updateContractAddresses"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "GovernanceCallTimelocked"
      | "GovernanceInitialised"
      | "GovernedProductionModeEntered"
      | "TimelockedGovernanceCallCanceled"
      | "TimelockedGovernanceCallExecuted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addFtso",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelGovernanceCall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeGovernanceCall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ftsoManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressUpdater",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCurrentPrices",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllFtsos",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrice(string)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrice(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPriceWithDecimals(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPriceWithDecimals(string)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPricesByIndices",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPricesBySymbols",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getFtso",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFtsoBySymbol",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFtsoHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFtsoIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFtsoSymbol",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFtsos",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedFtsos",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedIndices",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedIndicesAndFtsos",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedIndicesAndSymbols",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedIndicesSymbolsAndFtsos",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedSymbols",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedSymbolsAndFtsos",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceSettings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialise",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialiseRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "productionMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeFtso",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "switchToProductionMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timelockedCalls",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateContractAddresses",
    values: [BytesLike[], AddressLike[]]
  ): string;

  decodeFunctionResult(functionFragment: "addFtso", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelGovernanceCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeGovernanceCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ftsoManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddressUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCurrentPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllFtsos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrice(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrice(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPriceWithDecimals(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPriceWithDecimals(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPricesByIndices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPricesBySymbols",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFtso", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFtsoBySymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFtsoHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFtsoIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFtsoSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFtsos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedFtsos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedIndices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedIndicesAndFtsos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedIndicesAndSymbols",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedIndicesSymbolsAndFtsos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedSymbols",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedSymbolsAndFtsos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "governanceSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialise", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialiseRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "productionMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeFtso", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "switchToProductionMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timelockedCalls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateContractAddresses",
    data: BytesLike
  ): Result;
}

export namespace GovernanceCallTimelockedEvent {
  export type InputTuple = [
    selector: BytesLike,
    allowedAfterTimestamp: BigNumberish,
    encodedCall: BytesLike
  ];
  export type OutputTuple = [
    selector: string,
    allowedAfterTimestamp: bigint,
    encodedCall: string
  ];
  export interface OutputObject {
    selector: string;
    allowedAfterTimestamp: bigint;
    encodedCall: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernanceInitialisedEvent {
  export type InputTuple = [initialGovernance: AddressLike];
  export type OutputTuple = [initialGovernance: string];
  export interface OutputObject {
    initialGovernance: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernedProductionModeEnteredEvent {
  export type InputTuple = [governanceSettings: AddressLike];
  export type OutputTuple = [governanceSettings: string];
  export interface OutputObject {
    governanceSettings: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimelockedGovernanceCallCanceledEvent {
  export type InputTuple = [selector: BytesLike, timestamp: BigNumberish];
  export type OutputTuple = [selector: string, timestamp: bigint];
  export interface OutputObject {
    selector: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimelockedGovernanceCallExecutedEvent {
  export type InputTuple = [selector: BytesLike, timestamp: BigNumberish];
  export type OutputTuple = [selector: string, timestamp: bigint];
  export interface OutputObject {
    selector: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FtsoRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): FtsoRegistry;
  waitForDeployment(): Promise<this>;

  interface: FtsoRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addFtso: TypedContractMethod<
    [_ftsoContract: AddressLike],
    [bigint],
    "nonpayable"
  >;

  cancelGovernanceCall: TypedContractMethod<
    [_selector: BytesLike],
    [void],
    "nonpayable"
  >;

  executeGovernanceCall: TypedContractMethod<
    [_selector: BytesLike],
    [void],
    "nonpayable"
  >;

  ftsoManager: TypedContractMethod<[], [string], "view">;

  getAddressUpdater: TypedContractMethod<[], [string], "view">;

  getAllCurrentPrices: TypedContractMethod<
    [],
    [IFtsoRegistry.PriceInfoStructOutput[]],
    "view"
  >;

  getAllFtsos: TypedContractMethod<[], [string[]], "view">;

  "getCurrentPrice(string)": TypedContractMethod<
    [_symbol: string],
    [[bigint, bigint] & { _price: bigint; _timestamp: bigint }],
    "view"
  >;

  "getCurrentPrice(uint256)": TypedContractMethod<
    [_assetIndex: BigNumberish],
    [[bigint, bigint] & { _price: bigint; _timestamp: bigint }],
    "view"
  >;

  "getCurrentPriceWithDecimals(uint256)": TypedContractMethod<
    [_assetIndex: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        _price: bigint;
        _timestamp: bigint;
        _assetPriceUsdDecimals: bigint;
      }
    ],
    "view"
  >;

  "getCurrentPriceWithDecimals(string)": TypedContractMethod<
    [_symbol: string],
    [
      [bigint, bigint, bigint] & {
        _price: bigint;
        _timestamp: bigint;
        _assetPriceUsdDecimals: bigint;
      }
    ],
    "view"
  >;

  getCurrentPricesByIndices: TypedContractMethod<
    [_indices: BigNumberish[]],
    [IFtsoRegistry.PriceInfoStructOutput[]],
    "view"
  >;

  getCurrentPricesBySymbols: TypedContractMethod<
    [_symbols: string[]],
    [IFtsoRegistry.PriceInfoStructOutput[]],
    "view"
  >;

  getFtso: TypedContractMethod<[_assetIndex: BigNumberish], [string], "view">;

  getFtsoBySymbol: TypedContractMethod<[_symbol: string], [string], "view">;

  getFtsoHistory: TypedContractMethod<
    [_assetIndex: BigNumberish],
    [[string, string, string, string, string]],
    "view"
  >;

  getFtsoIndex: TypedContractMethod<[_symbol: string], [bigint], "view">;

  getFtsoSymbol: TypedContractMethod<
    [_assetIndex: BigNumberish],
    [string],
    "view"
  >;

  getFtsos: TypedContractMethod<
    [_assetIndices: BigNumberish[]],
    [string[]],
    "view"
  >;

  getSupportedFtsos: TypedContractMethod<[], [string[]], "view">;

  getSupportedIndices: TypedContractMethod<[], [bigint[]], "view">;

  getSupportedIndicesAndFtsos: TypedContractMethod<
    [],
    [[bigint[], string[]] & { _supportedIndices: bigint[]; _ftsos: string[] }],
    "view"
  >;

  getSupportedIndicesAndSymbols: TypedContractMethod<
    [],
    [
      [bigint[], string[]] & {
        _supportedIndices: bigint[];
        _supportedSymbols: string[];
      }
    ],
    "view"
  >;

  getSupportedIndicesSymbolsAndFtsos: TypedContractMethod<
    [],
    [
      [bigint[], string[], string[]] & {
        _supportedIndices: bigint[];
        _supportedSymbols: string[];
        _ftsos: string[];
      }
    ],
    "view"
  >;

  getSupportedSymbols: TypedContractMethod<[], [string[]], "view">;

  getSupportedSymbolsAndFtsos: TypedContractMethod<
    [],
    [[string[], string[]] & { _supportedSymbols: string[]; _ftsos: string[] }],
    "view"
  >;

  governance: TypedContractMethod<[], [string], "view">;

  governanceSettings: TypedContractMethod<[], [string], "view">;

  initialise: TypedContractMethod<
    [_initialGovernance: AddressLike],
    [void],
    "nonpayable"
  >;

  initialiseRegistry: TypedContractMethod<
    [_addressUpdater: AddressLike],
    [void],
    "nonpayable"
  >;

  productionMode: TypedContractMethod<[], [boolean], "view">;

  removeFtso: TypedContractMethod<[_ftso: AddressLike], [void], "nonpayable">;

  switchToProductionMode: TypedContractMethod<[], [void], "nonpayable">;

  timelockedCalls: TypedContractMethod<
    [arg0: BytesLike],
    [[bigint, string] & { allowedAfterTimestamp: bigint; encodedCall: string }],
    "view"
  >;

  updateContractAddresses: TypedContractMethod<
    [_contractNameHashes: BytesLike[], _contractAddresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addFtso"
  ): TypedContractMethod<[_ftsoContract: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelGovernanceCall"
  ): TypedContractMethod<[_selector: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeGovernanceCall"
  ): TypedContractMethod<[_selector: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ftsoManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAddressUpdater"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAllCurrentPrices"
  ): TypedContractMethod<[], [IFtsoRegistry.PriceInfoStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getAllFtsos"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCurrentPrice(string)"
  ): TypedContractMethod<
    [_symbol: string],
    [[bigint, bigint] & { _price: bigint; _timestamp: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentPrice(uint256)"
  ): TypedContractMethod<
    [_assetIndex: BigNumberish],
    [[bigint, bigint] & { _price: bigint; _timestamp: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentPriceWithDecimals(uint256)"
  ): TypedContractMethod<
    [_assetIndex: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        _price: bigint;
        _timestamp: bigint;
        _assetPriceUsdDecimals: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentPriceWithDecimals(string)"
  ): TypedContractMethod<
    [_symbol: string],
    [
      [bigint, bigint, bigint] & {
        _price: bigint;
        _timestamp: bigint;
        _assetPriceUsdDecimals: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentPricesByIndices"
  ): TypedContractMethod<
    [_indices: BigNumberish[]],
    [IFtsoRegistry.PriceInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentPricesBySymbols"
  ): TypedContractMethod<
    [_symbols: string[]],
    [IFtsoRegistry.PriceInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFtso"
  ): TypedContractMethod<[_assetIndex: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getFtsoBySymbol"
  ): TypedContractMethod<[_symbol: string], [string], "view">;
  getFunction(
    nameOrSignature: "getFtsoHistory"
  ): TypedContractMethod<
    [_assetIndex: BigNumberish],
    [[string, string, string, string, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFtsoIndex"
  ): TypedContractMethod<[_symbol: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFtsoSymbol"
  ): TypedContractMethod<[_assetIndex: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getFtsos"
  ): TypedContractMethod<[_assetIndices: BigNumberish[]], [string[]], "view">;
  getFunction(
    nameOrSignature: "getSupportedFtsos"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getSupportedIndices"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getSupportedIndicesAndFtsos"
  ): TypedContractMethod<
    [],
    [[bigint[], string[]] & { _supportedIndices: bigint[]; _ftsos: string[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSupportedIndicesAndSymbols"
  ): TypedContractMethod<
    [],
    [
      [bigint[], string[]] & {
        _supportedIndices: bigint[];
        _supportedSymbols: string[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSupportedIndicesSymbolsAndFtsos"
  ): TypedContractMethod<
    [],
    [
      [bigint[], string[], string[]] & {
        _supportedIndices: bigint[];
        _supportedSymbols: string[];
        _ftsos: string[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSupportedSymbols"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getSupportedSymbolsAndFtsos"
  ): TypedContractMethod<
    [],
    [[string[], string[]] & { _supportedSymbols: string[]; _ftsos: string[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "governance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "governanceSettings"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialise"
  ): TypedContractMethod<
    [_initialGovernance: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialiseRegistry"
  ): TypedContractMethod<[_addressUpdater: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "productionMode"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeFtso"
  ): TypedContractMethod<[_ftso: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "switchToProductionMode"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "timelockedCalls"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[bigint, string] & { allowedAfterTimestamp: bigint; encodedCall: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateContractAddresses"
  ): TypedContractMethod<
    [_contractNameHashes: BytesLike[], _contractAddresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "GovernanceCallTimelocked"
  ): TypedContractEvent<
    GovernanceCallTimelockedEvent.InputTuple,
    GovernanceCallTimelockedEvent.OutputTuple,
    GovernanceCallTimelockedEvent.OutputObject
  >;
  getEvent(
    key: "GovernanceInitialised"
  ): TypedContractEvent<
    GovernanceInitialisedEvent.InputTuple,
    GovernanceInitialisedEvent.OutputTuple,
    GovernanceInitialisedEvent.OutputObject
  >;
  getEvent(
    key: "GovernedProductionModeEntered"
  ): TypedContractEvent<
    GovernedProductionModeEnteredEvent.InputTuple,
    GovernedProductionModeEnteredEvent.OutputTuple,
    GovernedProductionModeEnteredEvent.OutputObject
  >;
  getEvent(
    key: "TimelockedGovernanceCallCanceled"
  ): TypedContractEvent<
    TimelockedGovernanceCallCanceledEvent.InputTuple,
    TimelockedGovernanceCallCanceledEvent.OutputTuple,
    TimelockedGovernanceCallCanceledEvent.OutputObject
  >;
  getEvent(
    key: "TimelockedGovernanceCallExecuted"
  ): TypedContractEvent<
    TimelockedGovernanceCallExecutedEvent.InputTuple,
    TimelockedGovernanceCallExecutedEvent.OutputTuple,
    TimelockedGovernanceCallExecutedEvent.OutputObject
  >;

  filters: {
    "GovernanceCallTimelocked(bytes4,uint256,bytes)": TypedContractEvent<
      GovernanceCallTimelockedEvent.InputTuple,
      GovernanceCallTimelockedEvent.OutputTuple,
      GovernanceCallTimelockedEvent.OutputObject
    >;
    GovernanceCallTimelocked: TypedContractEvent<
      GovernanceCallTimelockedEvent.InputTuple,
      GovernanceCallTimelockedEvent.OutputTuple,
      GovernanceCallTimelockedEvent.OutputObject
    >;

    "GovernanceInitialised(address)": TypedContractEvent<
      GovernanceInitialisedEvent.InputTuple,
      GovernanceInitialisedEvent.OutputTuple,
      GovernanceInitialisedEvent.OutputObject
    >;
    GovernanceInitialised: TypedContractEvent<
      GovernanceInitialisedEvent.InputTuple,
      GovernanceInitialisedEvent.OutputTuple,
      GovernanceInitialisedEvent.OutputObject
    >;

    "GovernedProductionModeEntered(address)": TypedContractEvent<
      GovernedProductionModeEnteredEvent.InputTuple,
      GovernedProductionModeEnteredEvent.OutputTuple,
      GovernedProductionModeEnteredEvent.OutputObject
    >;
    GovernedProductionModeEntered: TypedContractEvent<
      GovernedProductionModeEnteredEvent.InputTuple,
      GovernedProductionModeEnteredEvent.OutputTuple,
      GovernedProductionModeEnteredEvent.OutputObject
    >;

    "TimelockedGovernanceCallCanceled(bytes4,uint256)": TypedContractEvent<
      TimelockedGovernanceCallCanceledEvent.InputTuple,
      TimelockedGovernanceCallCanceledEvent.OutputTuple,
      TimelockedGovernanceCallCanceledEvent.OutputObject
    >;
    TimelockedGovernanceCallCanceled: TypedContractEvent<
      TimelockedGovernanceCallCanceledEvent.InputTuple,
      TimelockedGovernanceCallCanceledEvent.OutputTuple,
      TimelockedGovernanceCallCanceledEvent.OutputObject
    >;

    "TimelockedGovernanceCallExecuted(bytes4,uint256)": TypedContractEvent<
      TimelockedGovernanceCallExecutedEvent.InputTuple,
      TimelockedGovernanceCallExecutedEvent.OutputTuple,
      TimelockedGovernanceCallExecutedEvent.OutputObject
    >;
    TimelockedGovernanceCallExecuted: TypedContractEvent<
      TimelockedGovernanceCallExecutedEvent.InputTuple,
      TimelockedGovernanceCallExecutedEvent.OutputTuple,
      TimelockedGovernanceCallExecutedEvent.OutputObject
    >;
  };
}
